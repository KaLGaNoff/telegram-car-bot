import os
import json
import logging
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Any, Optional, Tuple, List

import pytz
import gspread
from gspread_formatting import (
    cellFormat,
    textFormat,
    color,
    format_cell_range,
    borders,
    Border,
    NumberFormat,
)

from starlette.applications import Starlette
from starlette.responses import JSONResponse, PlainTextResponse
from starlette.requests import Request

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    ContextTypes,
    filters,
)
from telegram.error import BadRequest, TimedOut, NetworkError

# ------------------------------------------------------------
# –õ–û–ì–Ü–ù–ì
# ------------------------------------------------------------
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
logging.basicConfig(
    level=LOG_LEVEL,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# ------------------------------------------------------------
# ENV
# ------------------------------------------------------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")  # JSON-—Ä—è–¥–æ–∫ (–Ω–µ —à–ª—è—Ö!)
RENDER_EXTERNAL_HOSTNAME = os.getenv("RENDER_EXTERNAL_HOSTNAME")
WEBHOOK_URL = os.getenv("WEBHOOK_URL") or (
    f"https://{RENDER_EXTERNAL_HOSTNAME}/webhook" if RENDER_EXTERNAL_HOSTNAME else None
)

# ------------------------------------------------------------
# –¢–ê–ô–ú–ó–û–ù–ê / –î–ê–¢–ò
# ------------------------------------------------------------
TZ = pytz.timezone("Europe/Kyiv")

def now_kyiv() -> datetime:
    return datetime.now(TZ)

# ------------------------------------------------------------
# GSHEET
# ------------------------------------------------------------
gc = None
ws = None

def init_gsheet() -> None:
    global gc, ws
    if not SERVICE_ACCOUNT_JSON or not GOOGLE_SHEET_ID:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ñ SERVICE_ACCOUNT_JSON –∞–±–æ GOOGLE_SHEET_ID")
    try:
        creds = json.loads(SERVICE_ACCOUNT_JSON)
    except Exception as e:
        raise RuntimeError(f"SERVICE_ACCOUNT_JSON –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π JSON: {e}")
    gc = gspread.service_account_from_dict(creds)
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    ws = sh.sheet1
    logger.info("Google Sheet –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ")

# ------------------------------------------------------------
# –°–¢–ê–ù / –ö–û–ù–°–¢–ê–ù–¢–ò –ö–û–ù–í–ï–†–°–ï–ô–®–ï–ù–£
# ------------------------------------------------------------
(
    STATE_WAITING_ODOMETER,
    STATE_WAITING_DISTRIBUTION,
    STATE_WAITING_CONFIRMATION,
) = range(3)

telegram_app: Optional[Application] = None

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–Ω–∞ –≤–∏–ø–∞–¥–æ–∫ —Ä–µ—Å—Ç–∞—Ä—Ç—ñ–≤ ‚Äî –º—ñ–Ω—ñ–º—É–º –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó —Å–µ—Å—ñ—ó)
user_state: Dict[int, Dict[str, Any]] = {}

# ------------------------------------------------------------
# –î–û–ü –û–ü–¶–Ü–á/–¢–ï–ö–°–¢–ò
# ------------------------------------------------------------
BTN_ADD = "‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥"
BTN_LAST = "üìÑ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å"
BTN_REPORT = "üìä –ó–≤—ñ—Ç"
BTN_HELP = "‚ùì –î–æ–ø–æ–º–æ–≥–∞"
BTN_RESET = "‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏"
BTN_DELETE = "üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π"

def main_menu_keyboard() -> InlineKeyboardMarkup:
    rows = [
        [
            InlineKeyboardButton(BTN_ADD, callback_data="add"),
            InlineKeyboardButton(BTN_LAST, callback_data="last"),
        ],
        [
            InlineKeyboardButton(BTN_REPORT, callback_data="report"),
            InlineKeyboardButton(BTN_HELP, callback_data="help"),
        ],
        [
            InlineKeyboardButton(BTN_DELETE, callback_data="delete"),
            InlineKeyboardButton(BTN_RESET, callback_data="reset"),
        ],
    ]
    return InlineKeyboardMarkup(rows)

# ------------------------------------------------------------
# –î–û–ü–û–ú–û–ñ–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –¢–ê–ë–õ–ò–¶–Ü
# ------------------------------------------------------------
def get_last_row_values() -> Optional[List[Any]]:
    values = ws.get_all_values()
    if len(values) <= 1:
        return None
    return values[-1]

def append_row_and_format(row: List[Any]) -> None:
    """
    –î–æ–¥–∞—î —Ä—è–¥–æ–∫ —É —Ç–∞–±–ª–∏—Ü—é –π –∑–∞—Å—Ç–æ—Å–æ–≤—É—î —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è:
    - –º–µ–∂—ñ –ø–æ –≤—Å—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö
    - —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è
    - —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª –¥–µ —Ç—Ä–µ–±–∞
    """
    ws.append_row(row, value_input_option="USER_ENTERED")
    # —ñ–Ω–¥–µ–∫—Å —â–æ–π–Ω–æ –¥–æ–¥–∞–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    last_row_index = ws.row_count
    # –∑–Ω–∞–π–¥–µ–º–æ —Ä–µ–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –Ω–µ-–ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ
    values = ws.get_all_values()
    last_row_index = len(values)

    rng = f"A{last_row_index}:N{last_row_index}"
    fmt = cellFormat(
        horizontalAlignment="CENTER",
        verticalAlignment="MIDDLE",
        textFormat=textFormat(bold=False),
        borders=borders(
            top=Border("SOLID"),
            bottom=Border("SOLID"),
            left=Border("SOLID"),
            right=Border("SOLID"),
        ),
    )
    try:
        format_cell_range(ws, rng, fmt)
    except Exception as e:
        logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è {rng}: {e}")

# ------------------------------------------------------------
# –ë–Ü–ó–ù–ï–°-–õ–û–ì–Ü–ö–ê
# ------------------------------------------------------------
def parse_int(text: str) -> Optional[int]:
    try:
        return int(text.strip().replace(" ", ""))
    except Exception:
        return None

def compute_distribution_diff(prev_odometer: int, new_odometer: int) -> int:
    return max(0, new_odometer - prev_odometer)

def build_distribution_text(diff: int) -> str:
    return (
        "–†–æ–∑–ø–æ–¥—ñ–ª–∏ –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ (–º—ñ—Å—Ç–æ/–æ–∫—Ä—É–≥/—Ç—Ä–∞—Å–∞).\n"
        f"–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥ –∑–∞ –ø–µ—Ä—ñ–æ–¥: <b>{diff} –∫–º</b>.\n"
        "–ù–∞–¥—ñ—à–ª–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ: <code>–º—ñ—Å—Ç–æ –æ–∫–æ–ª–∏—Ü—è —Ç—Ä–∞—Å–∞</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>120 30 50</code>"
    )

def split_distribution(text: str) -> Optional[Tuple[int, int, int]]:
    parts = text.replace(",", " ").split()
    if len(parts) != 3:
        return None
    nums = []
    for p in parts:
        try:
            nums.append(int(p))
        except Exception:
            return None
    return tuple(nums)  # type: ignore

def get_prev_odometer() -> int:
    last = get_last_row_values()
    if not last:
        return 0
    try:
        return int(last[1])  # –¥—Ä—É–≥–∏–π —Å—Ç–æ–≤–ø–µ—Ü—å ‚Äî –æ–¥–æ–º–µ—Ç—Ä
    except Exception:
        return 0

def render_last_text() -> str:
    last = get_last_row_values()
    if not last:
        return "–ü–æ–∫–∏ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤."
    # –ü—ñ–¥–ª–∞—à—Ç—É—î–º–æ –ø—ñ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫ (A..N)
    (
        date,
        odometer,
        diff,
        city_km,
        city_exact,
        city_rounded,
        district_km,
        district_exact,
        district_rounded,
        highway_km,
        highway_exact,
        highway_rounded,
        total_exact,
        total_rounded,
        *rest,
    ) = (last + [""] * 14)[:14]
    return (
        f"<b>–î–∞—Ç–∞:</b> {date}\n"
        f"<b>–û–¥–æ–º–µ—Ç—Ä:</b> {odometer}\n"
        f"<b>–ü—Ä–æ–±—ñ–≥:</b> {diff} –∫–º\n"
        f"<b>–ú—ñ—Å—Ç–æ:</b> {city_km} (‚âà {city_rounded})\n"
        f"<b>–û–∫—Ä—É–≥:</b> {district_km} (‚âà {district_rounded})\n"
        f"<b>–¢—Ä–∞—Å–∞:</b> {highway_km} (‚âà {highway_rounded})\n"
        f"<b>–†–∞–∑–æ–º (—Ç–æ—á–Ω–æ/‚âà):</b> {total_exact} / {total_rounded}"
    )

# ------------------------------------------------------------
# HANDLERS
# ------------------------------------------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.effective_message.reply_text(
        "–í—ñ—Ç–∞—é! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ.",
        reply_markup=main_menu_keyboard(),
    )

async def on_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ö–æ–º–∞–Ω–¥–∏:\n"
        f"{BTN_ADD} ‚Äî –¥–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å\n"
        f"{BTN_LAST} ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å\n"
        f"{BTN_REPORT} ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –∑–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å\n"
        f"{BTN_DELETE} ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å\n"
        f"{BTN_RESET} ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π –≤–≤—ñ–¥\n\n"
        "–£—Å—ñ –¥—ñ—ó –¥–æ—Å—Ç—É–ø–Ω—ñ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏."
    )
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)
    else:
        await update.effective_message.reply_text(text, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)

async def on_reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    uid = update.effective_user.id
    user_state.pop(uid, None)
    text = "–°–∫–∏–Ω—É—Ç–æ. –ü–æ—á–∏–Ω–∞–π–º–æ —Å–ø–æ—á–∞—Ç–∫—É."
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard())
    else:
        await update.effective_message.reply_text(text, reply_markup=main_menu_keyboard())

async def on_last(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = render_last_text()
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)
    else:
        await update.effective_message.reply_text(text, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)

async def on_delete(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ó—ñ—Ç—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ ‚Äî –¥—É–∂–µ –æ–±–µ—Ä–µ–∂–Ω–æ, —É –≤–∞—Å –º–æ–∂–µ –±—É—Ç–∏ —ñ–Ω—à–∞ –ª–æ–≥—ñ–∫–∞ –∞—Ä—Ö—ñ–≤–∞—Ü—ñ—ó
    try:
        values = ws.get_all_values()
        if len(values) <= 1:
            text = "–ù–µ–º–∞—î —â–æ –≤–∏–¥–∞–ª—è—Ç–∏."
        else:
            ws.delete_rows(len(values))
            text = "–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ."
    except Exception as e:
        logger.exception(e)
        text = f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {e}"

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard())
    else:
        await update.effective_message.reply_text(text, reply_markup=main_menu_keyboard())

async def on_report(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –î—É–∂–µ —Å–ø—Ä–æ—â–µ–Ω–∏–π –∑–≤—ñ—Ç (–ø—Ä–∏–∫–ª–∞–¥)
    try:
        values = ws.get_all_values()
        if len(values) <= 1:
            text = "–î–∞–Ω–∏—Ö –¥–ª—è –∑–≤—ñ—Ç—É —â–µ –Ω–µ–º–∞—î."
        else:
            # —Ä–∞—Ö—É—î–º–æ –ø–æ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö N —Ä—è–¥–∫–∞—Ö –∞–±–æ –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å
            # —Ç—É—Ç –ø—Ä–æ—Å—Ç–æ –ø–æ –≤—Å—ñ–º
            total_km = 0
            for row in values[1:]:
                try:
                    total_km += int(row[2])  # diff
                except Exception:
                    pass
            text = f"–°—É–º–∞—Ä–Ω–∏–π –ø—Ä–æ–±—ñ–≥ —É —Ç–∞–±–ª–∏—Ü—ñ: <b>{total_km} –∫–º</b>."
    except Exception as e:
        logger.exception(e)
        text = f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—ñ –∑–≤—ñ—Ç—É: {e}"

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text(text, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)
    else:
        await update.effective_message.reply_text(text, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)

# -------- –î–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É (–∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω) --------
async def start_add(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞:", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="reset")]]))
    else:
        await update.effective_message.reply_text("–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞:", reply_markup=ReplyKeyboardRemove())
    return STATE_WAITING_ODOMETER

async def got_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.effective_message.text or ""
    val = parse_int(text)
    if val is None or val <= 0:
        await update.effective_message.reply_text("–ù–∞–¥—ñ—à–ª–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ (–∫–º). –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")
        return STATE_WAITING_ODOMETER

    uid = update.effective_user.id
    prev = get_prev_odometer()
    diff = compute_distribution_diff(prev, val)
    user_state[uid] = {
        "odometer": val,
        "diff": diff,
    }
    await update.effective_message.reply_text(
        build_distribution_text(diff),
        parse_mode=ParseMode.HTML,
    )
    return STATE_WAITING_DISTRIBUTION

async def got_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    uid = update.effective_user.id
    st = user_state.get(uid) or {}
    dist = split_distribution(update.effective_message.text or "")
    if not dist:
        await update.effective_message.reply_text(
            "–§–æ—Ä–º–∞—Ç: <code>–º—ñ—Å—Ç–æ –æ–∫–æ–ª–∏—Ü—è —Ç—Ä–∞—Å–∞</code>, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>120 30 50</code>",
            parse_mode=ParseMode.HTML,
        )
        return STATE_WAITING_DISTRIBUTION

    c, d, h = dist
    if c < 0 or d < 0 or h < 0:
        await update.effective_message.reply_text("–ó–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—ñ–¥‚Äô—î–º–Ω–∏–º–∏.")
        return STATE_WAITING_DISTRIBUTION

    diff = st.get("diff", 0)
    if c + d + h != diff:
        await update.effective_message.reply_text(
            f"–°—É–º–∞ ({c+d+h}) –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î –ø—Ä–æ–±—ñ–≥—É ({diff}). –í–≤–µ–¥–∏ —â–µ —Ä–∞–∑."
        )
        return STATE_WAITING_DISTRIBUTION

    st["city"] = c
    st["district"] = d
    st["highway"] = h
    user_state[uid] = st

    text = (
        "<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å:</b>\n"
        f"–û–¥–æ–º–µ—Ç—Ä: <b>{st['odometer']}</b>\n"
        f"–ü—Ä–æ–±—ñ–≥: <b>{diff}</b>\n"
        f"–ú—ñ—Å—Ç–æ/–û–∫—Ä—É–≥/–¢—Ä–∞—Å–∞: <b>{c}/{d}/{h}</b>"
    )
    kb = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data="confirm")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="reset")],
        ]
    )
    await update.effective_message.reply_text(text, reply_markup=kb, parse_mode=ParseMode.HTML)
    return STATE_WAITING_CONFIRMATION

async def on_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.answer()
    uid = update.effective_user.id
    st = user_state.get(uid)
    if not st:
        await update.callback_query.edit_message_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END

    # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –ø—ñ–¥ –≤–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫ (A..N).
    # –Ø–∫—â–æ —É –≤–∞—Å —Å–∫–ª–∞–¥–Ω—ñ—à—ñ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ (exact/rounded), –ø—ñ–¥—Å—Ç–∞–≤—Ç–µ —Å–≤–æ—ó —Ñ–æ—Ä–º—É–ª–∏.
    date_s = now_kyiv().strftime("%d.%m.%Y %H:%M")
    od = st["odometer"]
    diff = st["diff"]
    c = st["city"]
    d = st["district"]
    h = st["highway"]

    # –ó–∞–≥–ª—É—à–∫–∏ exact/rounded (–∑–∞–º—ñ–Ω—ñ—Ç—å —Å–≤–æ—ó–º–∏ –æ–±—á–∏—Å–ª–µ–Ω–Ω—è–º–∏, —è–∫—â–æ —Ç—Ä–µ–±–∞)
    city_exact = c
    city_rounded = c
    district_exact = d
    district_rounded = d
    highway_exact = h
    highway_rounded = h
    total_exact = diff
    total_rounded = diff

    row = [
        date_s,              # A: –¥–∞—Ç–∞/—á–∞—Å
        od,                  # B: –æ–¥–æ–º–µ—Ç—Ä
        diff,                # C: —Ä—ñ–∑–Ω–∏—Ü—è
        c, city_exact, city_rounded,
        d, district_exact, district_rounded,
        h, highway_exact, highway_rounded,
        total_exact, total_rounded
    ]

    try:
        append_row_and_format(row)
        user_state.pop(uid, None)
        await update.callback_query.edit_message_text("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ!", reply_markup=main_menu_keyboard())
    except Exception as e:
        logger.exception(e)
        await update.callback_query.edit_message_text(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}", reply_markup=main_menu_keyboard())

    return ConversationHandler.END

# ------------------------------------------------------------
# CALLBACKS (–º–µ–Ω—é)
# ------------------------------------------------------------
async def on_menu_click(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    data = update.callback_query.data
    if data == "add":
        await start_add(update, context)
        return
    if data == "last":
        await on_last(update, context)
        return
    if data == "report":
        await on_report(update, context)
        return
    if data == "delete":
        await on_delete(update, context)
        return
    if data == "reset":
        await on_reset(update, context)
        return
    if data == "help":
        await on_help(update, context)
        return
    await update.callback_query.answer("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è")

# ------------------------------------------------------------
# –Ü–ù–Ü–¶–Ü–ê–õ–Ü–ó–ê–¶–Ü–Ø TELEGRAM APPLICATION
# ------------------------------------------------------------
async def init_telegram_app() -> None:
    """
    –°—Ç–≤–æ—Ä—é—î Application, –¥–æ–¥–∞—î —Ö–µ–Ω–¥–ª–µ—Ä–∏, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î & —Å—Ç–∞—Ä—Ç—É—î,
    —Å—Ç–∞–≤–∏—Ç—å –≤–µ–±—Ö—É–∫.
    """
    global telegram_app, ws

    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω–æ TELEGRAM_TOKEN")

    # gsheet
    if ws is None:
        init_gsheet()

    # –ë—É–¥—É—î–º–æ Application
    telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # Handlers
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(start_add, pattern="^add$")],
        states={
            STATE_WAITING_ODOMETER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, got_odometer)
            ],
            STATE_WAITING_DISTRIBUTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, got_distribution)
            ],
            STATE_WAITING_CONFIRMATION: [
                CallbackQueryHandler(on_confirm, pattern="^confirm$")
            ],
        },
        fallbacks=[
            CallbackQueryHandler(on_reset, pattern="^reset$"),
            CommandHandler("reset", on_reset),
        ],
        per_user=True,
        per_chat=True,
        per_message=True,  # —â–æ–± –Ω–µ –±—É–ª–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    )

    telegram_app.add_handler(CommandHandler("start", cmd_start))
    telegram_app.add_handler(CommandHandler("help", on_help))
    telegram_app.add_handler(CommandHandler("last", on_last))
    telegram_app.add_handler(CommandHandler("report", on_report))
    telegram_app.add_handler(CommandHandler("delete", on_delete))
    telegram_app.add_handler(CallbackQueryHandler(on_menu_click))
    telegram_app.add_handler(conv_handler)

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ Telegram API
    bot_info = await telegram_app.bot.get_me()
    logger.info(f"–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {bot_info.username}")

    # –ó–∞–ø—É—Å–∫ Telegram Application
    await telegram_app.initialize()
    await telegram_app.start()

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
    if not WEBHOOK_URL:
        raise RuntimeError(
            "–ù–µ –∑–∞–¥–∞–Ω–æ WEBHOOK_URL –∞–±–æ RENDER_EXTERNAL_HOSTNAME ‚Äî –Ω–µ –º–æ–∂—É –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–µ–±—Ö—É–∫"
        )
    logger.info(f"–°—Ç–∞–≤–∏–º–æ –≤–µ–±—Ö—É–∫: {WEBHOOK_URL}")
    await telegram_app.bot.set_webhook(url=WEBHOOK_URL, drop_pending_updates=True)
    logger.info("–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

# ------------------------------------------------------------
# STARLETTE APP + ROUTES
# ------------------------------------------------------------
async def on_startup():
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Telegram Application —Ç–∞ —Å—Ç–∞—Ä—Ç—É—î–º–æ –π–æ–≥–æ
    await init_telegram_app()

async def on_shutdown():
    # –ê–∫—É—Ä–∞—Ç–Ω–æ –∑—É–ø–∏–Ω—è—î–º–æ Telegram Application —ñ –ø—Ä–∏–±–∏—Ä–∞—î–º–æ –≤–µ–±—Ö—É–∫
    global telegram_app
    if telegram_app is not None:
        try:
            await telegram_app.bot.delete_webhook(drop_pending_updates=False)
        except Exception as e:
            logger.warning(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–±—Ö—É–∫ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ: {e}")
        try:
            await telegram_app.stop()
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ Application: {e}")
        try:
            await telegram_app.shutdown()
        except Exception as e:
            logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ shutdown Application: {e}")

app = Starlette(on_startup=[on_startup], on_shutdown=[on_shutdown])

@app.get("/")
async def root(_: Request):
    return PlainTextResponse("OK")

@app.post("/webhook")
async def webhook(request: Request):
    global telegram_app
    if telegram_app is None:
        logger.error("Application —â–µ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ!")
        return JSONResponse({"status": "error", "detail": "app not initialized"}, status_code=500)

    try:
        data = await request.json()
    except Exception:
        return JSONResponse({"status": "error", "detail": "invalid json"}, status_code=400)

    try:
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except BadRequest as e:
        logger.warning(f"BadRequest: {e}")
    except (TimedOut, NetworkError) as e:
        logger.warning(f"Network issue: {e}")
    except Exception as e:
        logger.exception(e)
        return JSONResponse({"status": "error"}, status_code=500)

    return JSONResponse({"status": "ok"})

# ------------------------------------------------------------
# –õ–û–ö–ê–õ–¨–ù–ò–ô –ó–ê–ü–£–°–ö
# ------------------------------------------------------------
if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", "8000"))
    uvicorn.run("main:app", host="0.0.0.0", port=port)
