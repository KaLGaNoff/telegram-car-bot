import os
import re
import json
import pytz
import asyncio
import logging
import aiohttp
from datetime import datetime

from starlette.applications import Starlette
from starlette.requests import Request
from starlette.responses import Response, PlainTextResponse
from starlette.routing import Route

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, ApplicationBuilder,
    CommandHandler, CallbackQueryHandler,
    ConversationHandler, MessageHandler,
    ContextTypes, filters,
)

import gspread
from google.oauth2.service_account import Credentials
from gspread_formatting import CellFormat, Borders, format_cell_range, TextFormat

# =========================
# –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø
# =========================
tz = pytz.timezone("Europe/Kyiv")
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("bot")
logger.setLevel(logging.DEBUG)  # –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è DEBUG-–ª–æ–≥—ñ–≤ –≥–ª–æ–±–∞–ª—å–Ω–æ

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME', '')}/webhook").rstrip("/")

# –¢–≤—ñ–π ID
OWNER_ID = 270380991

# –í–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª—å–Ω–æ–≥–æ (—Ñ—ñ–∫—Å–æ–≤–∞–Ω—ñ —Ç–≤–æ—ó)
CITY_L100 = 11.66
DISTRICT_L100 = 11.17
HIGHWAY_L100 = 10.19

WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRM = range(3)

telegram_app: Application | None = None
gc = None
worksheet = None
user_data_store: dict[int, dict] = {}


# =========================
# –£–¢–ò–õ–Ü–¢–ò
# =========================
def _build_webhook_url() -> str:
    logger.debug("–§–æ—Ä–º—É—î–º–æ WEBHOOK_URL")
    env_url = os.getenv("WEBHOOK_URL")
    if env_url:
        url = env_url.strip()
        logger.debug(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ WEBHOOK_URL –∑ –∑–º—ñ–Ω–Ω–æ—ó –æ—Ç–æ—á–µ–Ω–Ω—è: {url}")
    else:
        host = os.getenv("RENDER_EXTERNAL_HOSTNAME", "").strip()
        if not host:
            logger.error("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBHOOK_URL –∞–±–æ RENDER_EXTERNAL_HOSTNAME")
            raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBHOOK_URL –∞–±–æ RENDER_EXTERNAL_HOSTNAME")
        url = f"https://{host}" if not host.startswith("http") else host
        logger.debug(f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ RENDER_EXTERNAL_HOSTNAME: {url}")

    url = url.rstrip("/")
    if url.endswith("/webhook/webhook"):
        url = url[:-8]
    if not url.endswith("/webhook"):
        url = f"{url}/webhook"
    logger.debug(f"–°—Ñ–æ—Ä–º–æ–≤–∞–Ω–∏–π WEBHOOK_URL: {url}")
    return url


def _authorize_gspread():
    global gc, worksheet
    logger.debug("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è gspread")
    creds_info = json.loads(SERVICE_ACCOUNT_JSON)
    scopes = ["https://www.googleapis.com/auth/spreadsheets", "https://www.googleapis.com/auth/drive"]
    creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
    gc = gspread.authorize(creds)
    worksheet = gc.open_by_key(GOOGLE_SHEET_ID).sheet1
    logger.info("gspread –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")


def _last_row_index() -> int:
    logger.debug("–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞")
    row_count = len(worksheet.get_all_values())
    logger.debug(f"–Ü–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞: {row_count}")
    return row_count


def _get_last_odometer() -> int | None:
    logger.debug("–û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –ø–æ–∫–∞–∑–Ω–∏–∫ –æ–¥–æ–º–µ—Ç—Ä–∞")
    vals = worksheet.get_all_values()
    if len(vals) <= 1:
        logger.debug("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è –æ–¥–æ–º–µ—Ç—Ä–∞")
        return None
    try:
        last_odo = int(vals[-1][1])
        logger.debug(f"–û—Å—Ç–∞–Ω–Ω—ñ–π –æ–¥–æ–º–µ—Ç—Ä: {last_odo}")
        return last_odo
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–¥–æ–º–µ—Ç—Ä–∞: {e}")
        return None


def _parse_distribution(text: str, total_km: int) -> tuple[int, int, int] | None:
    logger.debug(f"–ü–∞—Ä—Å–∏–º–æ —Ä–æ–∑–ø–æ–¥—ñ–ª: {text}, —Å—É–º–∞ = {total_km}")
    t = text.lower().strip()
    nums = re.findall(r"\d+", t)
    if len(nums) == 3:
        a, b, c = map(int, nums[:3])
        if a + b + c == total_km:
            logger.debug(f"–†–æ–∑–ø–æ–¥—ñ–ª –∫–æ—Ä–µ–∫—Ç–Ω–∏–π: –º—ñ—Å—Ç–æ={a}, —Ä–∞–π–æ–Ω={b}, —Ç—Ä–∞—Å–∞={c}")
            return a, b, c
    logger.debug("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª")
    return None


def _format_just_added_row(row_index: int):
    logger.debug(f"–§–æ—Ä–º–∞—Ç—É—î–º–æ —Ä—è–¥–æ–∫ {row_index}")
    fmt = CellFormat(
        textFormat=TextFormat(bold=False),
        horizontalAlignment="CENTER",
        borders=Borders(
            top={"style": "SOLID"}, bottom={"style": "SOLID"},
            left={"style": "SOLID"}, right={"style": "SOLID"}
        ),
    )
    format_cell_range(worksheet, f"A{row_index}:N{row_index}", fmt)
    logger.debug(f"–†—è–¥–æ–∫ {row_index} –≤—ñ–¥—Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ")


# =========================
# KEYBOARD
# =========================
def _main_keyboard():
    logger.debug("–§–æ—Ä–º—É—î–º–æ –æ—Å–Ω–æ–≤–Ω—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É")
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data="add"),
         InlineKeyboardButton("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="last")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π", callback_data="delete"),
         InlineKeyboardButton("üìä –ó–≤—ñ—Ç –º—ñ—Å—è—Ü—è", callback_data="report")],
        [InlineKeyboardButton("üîÅ –°–∫–∏–Ω—É—Ç–∏", callback_data="reset"),
         InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
    ])
    logger.debug("–û—Å–Ω–æ–≤–Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ —Å—Ñ–æ—Ä–º–æ–≤–∞–Ω–∞")
    return keyboard


# =========================
# HANDLERS
# =========================
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
    if update.effective_user.id != OWNER_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø: {update.effective_user.id}")
        await update.message.reply_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return ConversationHandler.END
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é üëá", reply_markup=_main_keyboard())
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –¥–ª—è {update.effective_user.id}")
    return ConversationHandler.END


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    logger.debug(f"–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏: {q.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {q.from_user.id}")
    await q.answer()
    if q.from_user.id != OWNER_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∫–Ω–æ–ø–∫–∏: {q.from_user.id}")
        await q.edit_message_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return ConversationHandler.END

    if q.data == "add":
        last_odo = _get_last_odometer()
        hint = f" (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: {last_odo})" if last_odo else ""
        await q.edit_message_text(f"–í–≤–µ–¥–∏ –æ–¥–æ–º–µ—Ç—Ä{hint}:")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {q.from_user.id} –æ–±—Ä–∞–≤ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Å—É")
        return WAITING_FOR_ODOMETER

    if q.data == "delete":
        r = _last_row_index()
        if r > 1:
            worksheet.delete_rows(r)
            await q.edit_message_text("‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å.")
            logger.info(f"–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ, —Ä—è–¥–æ–∫: {r}")
        else:
            await q.edit_message_text("–ù–µ–º–∞—î —â–æ –≤–∏–¥–∞–ª—è—Ç–∏.")
            logger.info("–°–ø—Ä–æ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å, –∞–ª–µ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
        return ConversationHandler.END

    if q.data == "last":
        vals = worksheet.get_all_values()
        if len(vals) <= 1:
            await q.edit_message_text("–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.")
            logger.info("–°–ø—Ä–æ–±–∞ –ø–µ—Ä–µ–≥–ª—è–¥—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É, –∞–ª–µ —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
            return ConversationHandler.END
        await q.edit_message_text(str(vals[-1]))
        logger.info(f"–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–æ: {vals[-1]}")
        return ConversationHandler.END

    if q.data == "report":
        now = datetime.now(tz)
        month = now.strftime("%Y-%m")
        vals = worksheet.get_all_values()
        total = sum(float(r[13]) for r in vals[1:] if r and r[0].startswith(month))
        await q.edit_message_text(f"üìä –ó–≤—ñ—Ç {month}: {round(total,2)} –ª")
        logger.info(f"–ó–≤—ñ—Ç –∑–∞ {month}: {round(total,2)} –ª")
        return ConversationHandler.END

    logger.debug("–ù–µ–≤—ñ–¥–æ–º–∞ –¥—ñ—è –∫–Ω–æ–ø–∫–∏")
    return ConversationHandler.END


async def handle_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.debug(f"–û–±—Ä–æ–±–∫–∞ –æ–¥–æ–º–µ—Ç—Ä–∞: {update.message.text} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
    try:
        odo = int(update.message.text.strip())
        prev = _get_last_odometer()
        diff = odo - prev if prev else 0
        user_data_store[update.effective_user.id] = {"odometer": odo, "diff": diff}
        await update.message.reply_text(f"–í–≤–µ–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª (—Å—É–º–∞ = {diff})")
        logger.info(f"–û–¥–æ–º–µ—Ç—Ä –≤–≤–µ–¥–µ–Ω–æ: {odo}, —Ä—ñ–∑–Ω–∏—Ü—è: {diff}")
        return WAITING_FOR_DISTRIBUTION
    except ValueError as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É –æ–¥–æ–º–µ—Ç—Ä–∞: {e}")
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ.")
        return WAITING_FOR_ODOMETER


async def handle_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {update.message.text} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    data = user_data_store[user_id]
    parsed = _parse_distribution(update.message.text, data["diff"])
    if not parsed:
        await update.message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª.")
        logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª: {update.message.text}")
        return WAITING_FOR_DISTRIBUTION

    city, dist, hw = parsed
    c = city * CITY_L100 / 100
    d = dist * DISTRICT_L100 / 100
    h = hw * HIGHWAY_L100 / 100
    t = c + d + h

    data.update({"city": city, "dist": dist, "hw": hw,
                 "c": c, "d": d, "h": h, "t": t})
    await update.message.reply_text(f"üèô {c:.2f} –ª, üèû {d:.2f} –ª, üõ£ {h:.2f} –ª\nŒ£ {t:.2f} –ª. –ó–±–µ—Ä–µ–≥—Ç–∏?")
    logger.info(f"–†–æ–∑–ø–æ–¥—ñ–ª –æ–±—Ä–æ–±–ª–µ–Ω–æ: –º—ñ—Å—Ç–æ={c:.2f}, —Ä–∞–π–æ–Ω={d:.2f}, —Ç—Ä–∞—Å–∞={h:.2f}, —Å—É–º–∞={t:.2f}")
    return CONFIRM


async def confirm_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    d = user_data_store.pop(user_id)
    now = datetime.now(tz)
    row = [now.strftime("%Y-%m-%d %H:%M:%S"), d["odometer"], d["diff"],
           d["city"], f"{d['c']:.4f}", round(d["c"]),
           d["dist"], f"{d['d']:.4f}", round(d["d"]),
           d["hw"], f"{d['h']:.4f}", round(d["h"]),
           f"{d['t']:.4f}", round(d["t"])]
    worksheet.append_row(row)
    _format_just_added_row(_last_row_index())
    await update.message.reply_text("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=_main_keyboard())
    logger.info(f"–ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {row}")
    return ConversationHandler.END


# =========================
# KEEP ALIVE
# =========================
async def keep_alive():
    logger.debug("–ó–∞–ø—É—Å–∫–∞—î–º–æ keep_alive –¥–ª—è –ø—ñ–Ω–≥—É —Å–µ—Ä–≤–µ—Ä–∞")
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get("https://telegram-car-bot-px9n.onrender.com") as resp:
                    logger.debug(f"keep_alive –ø—ñ–Ω–≥: —Å—Ç–∞—Ç—É—Å {resp.status}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ keep_alive: {e}")
            await asyncio.sleep(30)  # –ü—ñ–Ω–≥ –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥


async def telegram_ping():
    logger.debug("–ó–∞–ø—É—Å–∫–∞—î–º–æ telegram_ping –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
    async with aiohttp.ClientSession() as session:
        while True:
            try:
                async with session.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe") as resp:
                    logger.debug(f"telegram_ping: —Å—Ç–∞—Ç—É—Å {resp.status}")
                    if resp.status != 200:
                        logger.error(f"telegram_ping –Ω–µ—É—Å–ø—ñ—à–Ω–∏–π: —Å—Ç–∞—Ç—É—Å {resp.status}")
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ telegram_ping: {e}")
            await asyncio.sleep(15)  # –ü—ñ–Ω–≥ –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥


# =========================
# APP
# =========================
async def init_telegram_app():
    global telegram_app
    logger.info("–ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é Telegram Application")
    try:
        logger.debug("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è gspread")
        _authorize_gspread()
        logger.info("gspread –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        logger.debug("–°—Ç–≤–æ—Ä—é—î–º–æ ApplicationBuilder")
        telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        logger.info("ApplicationBuilder —Å—Ç–≤–æ—Ä–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        logger.debug("–î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏")
        conv = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                WAITING_FOR_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odometer)],
                WAITING_FOR_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distribution)],
                CONFIRM: [MessageHandler(filters.TEXT & ~filters.COMMAND, confirm_save)]
            },
            fallbacks=[CommandHandler("cancel", lambda update, context: ConversationHandler.END)],
            per_chat=True,
            per_user=True,
        )
        telegram_app.add_handler(conv)
        telegram_app.add_handler(CallbackQueryHandler(handle_buttons))
        logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        logger.debug("–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è telegram_app")
        await telegram_app.initialize()
        logger.info("telegram_app —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        logger.debug("–ó–∞–ø—É—Å–∫–∞—î–º–æ telegram_app")
        await telegram_app.start()
        logger.info("telegram_app –∑–∞–ø—É—â–µ–Ω–æ")
        webhook_url = _build_webhook_url()
        logger.debug(f"–í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–µ–±—Ö—É–∫: {webhook_url}")
        await telegram_app.bot.set_webhook(webhook_url, drop_pending_updates=True)
        logger.info(f"Webhook —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ keep_alive —ñ telegram_ping
        asyncio.create_task(keep_alive())
        asyncio.create_task(telegram_ping())
        logger.info("keep_alive —Ç–∞ telegram_ping –∑–∞–≤–¥–∞–Ω–Ω—è –∑–∞–ø—É—â–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram Application: {e}", exc_info=True)
        telegram_app = None
        raise


async def shutdown_telegram_app():
    logger.debug("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∏ telegram_app")
    if telegram_app:
        logger.debug("–í–∏–¥–∞–ª—è—î–º–æ –≤–µ–±—Ö—É–∫")
        try:
            await telegram_app.bot.delete_webhook()
            logger.info("–í–µ–±—Ö—É–∫ –≤–∏–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        logger.debug("–ó—É–ø–∏–Ω—è—î–º–æ telegram_app")
        try:
            await telegram_app.stop()
            logger.info("telegram_app –∑—É–ø–∏–Ω–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ telegram_app: {e}", exc_info=True)
        logger.debug("–ó–∞–≤–µ—Ä—à—É—î–º–æ telegram_app")
        try:
            await telegram_app.shutdown()
            logger.info("telegram_app –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è telegram_app: {e}", exc_info=True)
    else:
        logger.warning("telegram_app –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")


async def home(request: Request):
    logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–Ω–≥ –Ω–∞ / –≤—ñ–¥ {request.client.host}")
    return PlainTextResponse("Bot is alive ‚úÖ")


async def webhook(request: Request):
    logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫-–∑–∞–ø–∏—Ç –≤—ñ–¥ {request.client.host}")
    if not telegram_app:
        logger.error("Telegram Application –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return Response(status_code=500)
    try:
        data = await request.json()
        logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –≤–µ–±—Ö—É–∫–∞: {data}")
        update = Update.de_json(data, bot=telegram_app.bot)
        if update is None:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return Response(status_code=400)
        await telegram_app.process_update(update)
        logger.info("–í–µ–±—Ö—É–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return Response(status_code=200)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return Response(status_code=500)


routes = [Route("/", home), Route("/webhook", webhook, methods=["POST"])]
app = Starlette(routes=routes, on_startup=[init_telegram_app], on_shutdown=[shutdown_telegram_app])
