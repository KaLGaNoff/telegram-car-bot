import os
import json
import time
import logging
import warnings
import gspread
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
from gspread_formatting import CellFormat, TextFormat, Borders, format_cell_range
import telegram
from logging.handlers import TimedRotatingFileHandler
from flask import Flask, request, Response
import requests
import threading

# –ü—Ä–∏–¥—É—à–µ–Ω–Ω—è PTBUserWarning
warnings.filterwarnings("ignore", category=telegram.warnings.PTBUserWarning)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
log_handler = TimedRotatingFileHandler(
    filename="bot.log",
    when="midnight",
    interval=1,
    backupCount=7
)
log_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s"
))
logger.addHandler(log_handler)
console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s"
))
logger.addHandler(console_handler)

logger.info(f"–í–µ—Ä—Å—ñ—è python-telegram-bot: {telegram.__version__}")

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
OWNER_ID = 270380991
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "https://your-render-app.onrender.com/webhook")

if not all([TELEGRAM_TOKEN, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_JSON]):
    logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è")
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
try:
    credentials = json.loads(SERVICE_ACCOUNT_JSON)
    client = gspread.service_account_from_dict(credentials)
    sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Sheets: {e}")
    raise

# –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—ñ
sheet_cache = None

def update_sheet_cache():
    global sheet_cache
    try:
        start_time = time.time()
        sheet_cache = sheet.get_all_values()
        logger.info(f"–ö–µ—à —Ç–∞–±–ª–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {time.time() - start_time:.3f} —Å–µ–∫")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")
        sheet_cache = []

update_sheet_cache()

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRM = range(3)
user_data_store = {}

# Flask —Å–µ—Ä–≤–µ—Ä
app = Flask(__name__)
telegram_app = None

def check_webhook():
    logger.debug("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –≤–µ–±—Ö—É–∫–∞")
    try:
        resp = requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getWebhookInfo")
        data = resp.json()
        logger.info(f"–°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: {data}")
        if not data.get("result", {}).get("url"):
            logger.info(f"–í–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ {WEBHOOK_URL}")
            resp = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": WEBHOOK_URL, "drop_pending_updates": True}
            )
            logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {resp.json()}")
        elif data.get("result", {}).get("pending_update_count", 0) > 0:
            logger.warning(f"–ó–Ω–∞–π–¥–µ–Ω–æ {data['result']['pending_update_count']} –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å, –æ—á–∏—â–∞—î–º–æ")
            resp = requests.post(
                f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/setWebhook",
                json={"url": data["result"]["url"], "drop_pending_updates": True}
            )
            logger.info(f"–û—á–∏—â–µ–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {resp.json()}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)

def periodic_webhook_check():
    logger.debug("–ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—É –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –≤–µ–±—Ö—É–∫–∞")
    while True:
        check_webhook()
        time.sleep(60)

def keep_alive():
    logger.debug("–ó–∞–ø—É—Å–∫–∞—î–º–æ keep_alive")
    while True:
        try:
            resp = requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe")
            logger.debug(f"Keep alive: Telegram API –≤—ñ–¥–ø–æ–≤—ñ–≤ {resp.status_code}")
        except Exception as e:
            logger.error(f"Keep alive –ø–æ–º–∏–ª–∫–∞: {e}")
        time.sleep(300)

def telegram_ping():
    logger.debug("–ó–∞–ø—É—Å–∫–∞—î–º–æ telegram_ping")
    while True:
        try:
            resp = requests.get(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe")
            logger.debug(f"Telegram ping: {resp.status_code}")
        except Exception as e:
            logger.error(f"Telegram ping –ø–æ–º–∏–ª–∫–∞: {e}")
        time.sleep(5)

def init_telegram_app():
    global telegram_app
    logger.info("–ü–æ—á–∏–Ω–∞—î–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—é Telegram Application")
    try:
        telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(handle_buttons)],
            states={
                WAITING_FOR_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odometer)],
                WAITING_FOR_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distribution)],
                CONFIRM: [CallbackQueryHandler(confirm_save)]
            },
            fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")],
            per_user=True,
            per_chat=True,
            per_message=False
        )
        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CommandHandler("stats", stats))
        telegram_app.add_handler(conv_handler)
        telegram_app.add_error_handler(error_handler)
        telegram_app.initialize()
        telegram_app.start()
        check_webhook()
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä—ñ–æ–¥–∏—á–Ω—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —É —Ñ–æ–Ω–æ–≤–∏—Ö –ø–æ—Ç–æ–∫–∞—Ö
        threading.Thread(target=keep_alive, daemon=True).start()
        threading.Thread(target=telegram_ping, daemon=True).start()
        threading.Thread(target=periodic_webhook_check, daemon=True).start()
        logger.info("Telegram app —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —Ç–∞ –∑–∞–ø—É—â–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram Application: {e}", exc_info=True)
        telegram_app = None
        raise

@app.route("/webhook", methods=["POST"])
def webhook():
    try:
        update = request.get_json()
        update = Update.de_json(update, telegram_app.bot)
        telegram_app.process_update(update)
        return Response(status=200)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return Response(status=500)

@app.route("/health", methods=["GET"])
def health():
    return {"status": "ok"}

def _main_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üü¢ –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥", callback_data="add"), InlineKeyboardButton("üî¥ –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete")],
        [InlineKeyboardButton("üìä –ó–≤—ñ—Ç", callback_data="report"), InlineKeyboardButton("üßæ –û—Å—Ç–∞–Ω–Ω—ñ–π", callback_data="last")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), InlineKeyboardButton("‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏", callback_data="reset")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ])

def _get_last_odometer():
    return int(float(sheet_cache[-1][1])) if len(sheet_cache) >= 2 else 0

def _parse_distribution(text, expected_sum):
    city_km = district_km = highway_km = 0
    text = text.lower()
    try:
        for word in text.split():
            if "–º—ñ—Å—Ç" in word:
                next_value = text.split(word)[1].strip().split()[0]
                city_km = float(next_value)
            elif "—Ä–∞–π–æ–Ω" in word:
                next_value = text.split(word)[1].strip().split()[0]
                district_km = float(next_value)
            elif "—Ç—Ä–∞—Å" in word:
                next_value = text.split(word)[1].strip().split()[0]
                highway_km = float(next_value)
    except (IndexError, ValueError):
        raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ä–æ–∑–ø–æ–¥—ñ–ª—É")
    total_entered = city_km + district_km + highway_km
    if abs(total_entered - expected_sum) > 1:
        raise ValueError(f"–ó–∞–≥–∞–ª—å–Ω–∏–π –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ ({total_entered}) –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è –∑ –ø—Ä–æ–±—ñ–≥–æ–º ({expected_sum})")
    return city_km, district_km, highway_km

def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id} –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
    if update.effective_user.id != OWNER_ID:
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø: {update.effective_user.id}")
        update.message.reply_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.*", parse_mode="Markdown")
        return
    context.user_data.clear()  # –û—á–∏—â–∞—î–º–æ —Å—Ç–∞–Ω –ø—Ä–∏ /start
    user_data_store.pop(update.effective_user.id, None)
    update.message.reply_text(
        "üöó *–í—ñ—Ç–∞—é —É —Ç–≤–æ—î–º—É –∞–≤—Ç–æ-–±–æ—Ç—ñ!* üëã\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=_main_keyboard(),
        parse_mode="Markdown"
    )
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–æ–±–ª–µ–Ω–∞ –¥–ª—è {update.effective_user.id}")

def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /stats –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id} –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
    if update.effective_user.id != OWNER_ID:
        update.message.reply_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ /stats: {update.effective_user.id}")
        return

    if not sheet_cache:
        update.message.reply_text("üìà *–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.* üòï", parse_mode="Markdown")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} —Å–ø—Ä–æ–±—É–≤–∞–≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: —Ç–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è")
        return

    try:
        total_distance = 0
        city_km = district_km = highway_km = 0
        city_fuel = district_fuel = highway_fuel = 0
        days = set()
        last_7_days_distance = 0
        last_7_days_fuel = 0
        eest = pytz.timezone("Europe/Kiev")
        today = datetime.now(eest)
        seven_days_ago = today - timedelta(days=7)

        for row in sheet_cache[1:]:  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            date_str = row[0]
            try:
                row_date = datetime.strptime(date_str, "%d.%m.%Y").replace(tzinfo=eest)
                days.add(date_str)
                distance = float(row[2]) if row[2] else 0
                total_distance += distance
                city_km += float(row[3]) if row[3] else 0
                district_km += float(row[6]) if row[6] else 0
                highway_km += float(row[9]) if row[9] else 0
                city_fuel += float(row[4].replace(',', '.')) if row[4] else 0
                district_fuel += float(row[7].replace(',', '.')) if row[7] else 0
                highway_fuel += float(row[10].replace(',', '.')) if row[10] else 0

                if row_date >= seven_days_ago:
                    last_7_days_distance += distance
                    last_7_days_fuel += float(row[12].replace(',', '.')) if row[12] else 0
            except ValueError as e:
                logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –≤ —Ä—è–¥–∫—É {row}: {e}")
                continue

        avg_daily_distance = total_distance / len(days) if days else 0
        total_km = city_km + district_km + highway_km
        city_percent = (city_km / total_km * 100) if total_km else 0
        district_percent = (district_km / total_km * 100) if total_km else 0
        highway_percent = (highway_km / total_km * 100) if total_km else 0

        def progress_bar(percent, emoji):
            filled = int(percent / 10)
            return emoji * filled + "‚¨ú" * (10 - filled)

        text = (
            f"üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±—ñ–≥—É* üöó\n\n"
            f"üìè *–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥*: {total_distance:.1f} –∫–º\n"
            f"üìÖ *–°–µ—Ä–µ–¥–Ω—ñ–π –∑–∞ –¥–µ–Ω—å*: {avg_daily_distance:.1f} –∫–º\n"
            f"üõ£ *–ü—Ä–æ–±—ñ–≥ –∑–∞ —Ç–∏–ø–æ–º –¥–æ—Ä–æ–≥–∏*:\n"
            f"  üèô *–ú—ñ—Å—Ç–æ*: {city_km:.1f} –∫–º ({city_fuel:.2f} –ª) `{progress_bar(city_percent, 'üü¶')} {city_percent:.1f}%`\n"
            f"  üå≥ *–†–∞–π–æ–Ω*: {district_km:.1f} –∫–º ({district_fuel:.2f} –ª) `{progress_bar(district_percent, 'üü©')} {district_percent:.1f}%`\n"
            f"  üõ£ *–¢—Ä–∞—Å–∞*: {highway_km:.1f} –∫–º ({highway_fuel:.2f} –ª) `{progress_bar(highway_percent, 'üüß')} {highway_percent:.1f}%`\n"
            f"üìÜ *–û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤*:\n"
            f"  üîÑ –ü—Ä–æ–±—ñ–≥: {last_7_days_distance:.1f} –∫–º\n"
            f"  ‚õΩ –í–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª—å–Ω–æ–≥–æ: {last_7_days_fuel:.2f} –ª\n"
        )
        update.message.reply_text(text, parse_mode="Markdown")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*: {e}", parse_mode="Markdown")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: {query.data} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {query.from_user.id} –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")

    if query.from_user.id != OWNER_ID:
        query.edit_message_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –∫–Ω–æ–ø–∫–∏: {query.from_user.id}")
        return

    data = user_data_store.get(query.from_user.id, {})
    context.user_data["state"] = None

    if query.data == "add":
        context.user_data["state"] = WAITING_FOR_ODOMETER
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
        last_odo = _get_last_odometer()
        last_odo_text = f"üìç *–¢–≤—ñ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –æ–¥–æ–º–µ—Ç—Ä*: {last_odo}" if last_odo else "üìç *–¶–µ —Ç–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å!*"
        query.edit_message_text(
            f"{last_odo_text}\n\nüìè *–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `53200`):",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return WAITING_FOR_ODOMETER

    elif query.data == "delete":
        if sheet_cache:
            try:
                start_time = time.time()
                sheet.delete_rows(len(sheet_cache))
                update_sheet_cache()
                query.edit_message_text("üóë *–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ!* ‚úÖ")
                logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id} –≤–∏–¥–∞–ª–∏–≤ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –∑–∞ {time.time() - start_time:.3f} —Å–µ–∫")
            except Exception as e:
                query.edit_message_text(f"‚ö†Ô∏è *–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è*: {e}", parse_mode="Markdown")
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É: {e}")
        else:
            query.edit_message_text("üìà *–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.* üòï", parse_mode="Markdown")

    elif query.data == "report" or query.data == "last":
        if not sheet_cache:
            query.edit_message_text("üìà *–¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.* üòï", parse_mode="Markdown")
            return
        text = "üìä *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏*:\n\n```\n–î–∞—Ç–∞       | –û–¥–æ–º–µ—Ç—Ä | –ü—Ä–æ–±—ñ–≥ | –ú—ñ—Å—Ç–æ | –í–∏—Ç—Ä–∞—Ç–∏\n"
        for row in sheet_cache[-5:]:
            text += f"{row[0]:<11}| {row[1]:<8}| {row[2]:<7}| {row[3]:<6}| {row[4]}\n"
        text += "```"
        query.edit_message_text(text, parse_mode="Markdown")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id} –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤ –∑–≤—ñ—Ç")

    elif query.data == "stats":
        stats(update, context)

    elif query.data == "reset":
        user_data_store.pop(query.from_user.id, None)
        context.user_data.clear()
        query.edit_message_text("‚ôªÔ∏è *–î–∞–Ω—ñ —Å–∫–∏–Ω—É—Ç–æ!* ‚úÖ", parse_mode="Markdown")
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {query.from_user.id} —Å–∫–∏–Ω—É–≤ –¥–∞–Ω—ñ")

    elif query.data == "help":
        query.edit_message_text(
            "‚ÑπÔ∏è *–Ø–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º*:\n"
            "1. –ù–∞—Ç–∏—Å–Ω–∏ üü¢ *–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥*.\n"
            "2. –í–≤–µ–¥–∏ –æ–¥–æ–º–µ—Ç—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `53200`).\n"
            "3. –í–∫–∞–∂–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª: *–º—ñ—Å—Ç–æ* 50 *—Ä–∞–π–æ–Ω* 30 *—Ç—Ä–∞—Å–∞* 6.\n"
            "4. –ó–∞–≥–∞–ª—å–Ω–∏–π –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ –º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ä—ñ–∑–Ω–∏—Ü—ñ –æ–¥–æ–º–µ—Ç—Ä–∞.\n"
            "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞* –ø–æ–∫–∞–∂–µ —Ç–≤–æ—ó –ø–æ—ó–∑–¥–∫–∏!",
            parse_mode="Markdown"
        )

    elif query.data == "retry_odometer":
        context.user_data["state"] = WAITING_FOR_ODOMETER
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
        last_odo = _get_last_odometer()
        last_odo_text = f"üìç *–¢–≤—ñ–π –æ—Å—Ç–∞–Ω–Ω—ñ–π –æ–¥–æ–º–µ—Ç—Ä*: {last_odo}" if last_odo else "üìç *–¶–µ —Ç–≤—ñ–π –ø–µ—Ä—à–∏–π –∑–∞–ø–∏—Å!*"
        query.edit_message_text(
            f"{last_odo_text}\n\nüìè *–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `53200`):",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return WAITING_FOR_ODOMETER

    elif query.data == "retry_distribution":
        user_id = query.from_user.id
        data = user_data_store.get(user_id, {})
        if not data:
            query.edit_message_text("‚ö†Ô∏è *–î–∞–Ω—ñ –∑–∞–≥—É–±–ª–µ–Ω–æ. –ü–æ—á–Ω–∏ –∑–Ω–æ–≤—É.*", parse_mode="Markdown")
            logger.warning(f"–î–∞–Ω—ñ –∑–∞–≥—É–±–ª–µ–Ω–æ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
            return ConversationHandler.END
        context.user_data["state"] = WAITING_FOR_DISTRIBUTION
        prev_odo = _get_last_odometer()
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
        query.edit_message_text(
            f"üìè *–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –æ–¥–æ–º–µ—Ç—Ä*: {prev_odo}\n"
            f"üìç *–ü–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä*: {data['odometer']}\n"
            f"üîÑ *–ü—Ä–æ–±—ñ–≥ –∑–∞ –ø–µ—Ä—ñ–æ–¥*: {data['diff']} –∫–º\n\n"
            f"üõ£ *–í–≤–µ–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–±—ñ–≥—É* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, *–º—ñ—Å—Ç–æ* {int(data['diff']/3)} *—Ä–∞–π–æ–Ω* {int(data['diff']/3)} *—Ç—Ä–∞—Å–∞* {int(data['diff']/3)}):\n"
            f"‚ÑπÔ∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ {data['diff']} –∫–º.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        return WAITING_FOR_DISTRIBUTION

def handle_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–û–±—Ä–æ–±–∫–∞ –æ–¥–æ–º–µ—Ç—Ä–∞: {update.message.text} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, —Å—Ç–∞–Ω: {context.user_data.get('state')}")
    if update.effective_user.id != OWNER_ID:
        update.message.reply_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –æ–¥–æ–º–µ—Ç—Ä–∞: {user_id}")
        return ConversationHandler.END

    if context.user_data.get("state") != WAITING_FOR_ODOMETER:
        logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –æ–¥–æ–º–µ—Ç—Ä–∞: {context.user_data.get('state')}")
        context.user_data.clear()
        user_data_store.pop(user_id, None)
        update.message.reply_text("üö´ –ü–æ—á–Ω–∏ –∑ /start –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'.", parse_mode="Markdown")
        return ConversationHandler.END

    try:
        text = update.message.text.strip().replace(",", ".")
        if not text.replace(".", "", 1).isdigit():
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ", callback_data="retry_odometer"),
                 InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
            ]
            update.message.reply_text(
                "üòÖ *–í–≤–µ–¥–∏ —á–∏—Å–ª–æ* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, `53200`):",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            return WAITING_FOR_ODOMETER

        odo = int(float(text))
        prev = _get_last_odometer()
        diff = odo - prev if prev else odo
        if diff <= 0:
            keyboard = [
                [InlineKeyboardButton("üîÑ –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ", callback_data="retry_odometer"),
                 InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
            ]
            update.message.reply_text(
                f"‚ùóÔ∏è *–û–¥–æ–º–µ—Ç—Ä –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–∏–π –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π* ({prev}).",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )
            return WAITING_FOR_ODOMETER

        user_data_store[user_id] = {"odometer": odo, "diff": diff}
        context.user_data["state"] = WAITING_FOR_DISTRIBUTION
        keyboard = [[InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]]
        update.message.reply_text(
            f"üìè *–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –æ–¥–æ–º–µ—Ç—Ä*: {prev}\n"
            f"üìç *–ü–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä*: {odo}\n"
            f"üîÑ *–ü—Ä–æ–±—ñ–≥ –∑–∞ –ø–µ—Ä—ñ–æ–¥*: {diff} –∫–º\n\n"
            f"üõ£ *–í–≤–µ–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–±—ñ–≥—É* (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, *–º—ñ—Å—Ç–æ* {int(diff/3)} *—Ä–∞–π–æ–Ω* {int(diff/3)} *—Ç—Ä–∞—Å–∞* {int(diff/3)}):\n"
            f"‚ÑπÔ∏è –ó–∞–≥–∞–ª—å–Ω–∏–π –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ {diff} –∫–º.",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        logger.info(f"–û–¥–æ–º–µ—Ç—Ä –≤–≤–µ–¥–µ–Ω–æ: {odo}, —Ä—ñ–∑–Ω–∏—Ü—è: {diff}")
        return WAITING_FOR_DISTRIBUTION
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –æ–¥–æ–º–µ—Ç—Ä–∞: {e}", exc_info=True)
        context.user_data.clear()
        user_data_store.pop(user_id, None)
        update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π /start.", parse_mode="Markdown")
        return ConversationHandler.END

def handle_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logger.debug(f"–û–±—Ä–æ–±–∫–∞ —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {update.message.text} –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, —Å—Ç–∞–Ω: {context.user_data.get('state')}")
    if update.effective_user.id != OWNER_ID:
        update.message.reply_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {user_id}")
        return ConversationHandler.END

    if context.user_data.get("state") != WAITING_FOR_DISTRIBUTION:
        logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {context.user_data.get('state')}")
        context.user_data.clear()
        user_data_store.pop(user_id, None)
        update.message.reply_text("üö´ –ü–æ—á–Ω–∏ –∑ /start –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'.", parse_mode="Markdown")
        return ConversationHandler.END

    try:
        data = user_data_store.get(user_id)
        if not data:
            logger.error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É")
            context.user_data.clear()
            update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω–∏ –∑ /start.", parse_mode="Markdown")
            return ConversationHandler.END

        city_km, district_km, highway_km = _parse_distribution(update.message.text, data["diff"])
        
        def calc(litres_per_100km, km):
            exact = round(km * litres_per_100km / 100, 2)
            rounded = round(exact)
            return exact, rounded

        c_exact, c_rounded = calc(11.66, city_km)
        d_exact, d_rounded = calc(11.17, district_km)
        h_exact, h_rounded = calc(10.19, highway_km)
        total_exact = round(c_exact + d_exact + h_exact, 2)
        total_rounded = round(total_exact)

        data.update({
            "city_km": city_km, "city_exact": c_exact, "city_rounded": c_rounded,
            "district_km": district_km, "district_exact": d_exact, "district_rounded": d_rounded,
            "highway_km": highway_km, "highway_exact": h_exact, "highway_rounded": h_rounded,
            "total_exact": total_exact, "total_rounded": total_rounded
        })
        user_data_store[user_id] = data

        text = (
            f"üìã *–ù–æ–≤–∏–π –∑–∞–ø–∏—Å*:\n"
            f"üìè *–û–¥–æ–º–µ—Ç—Ä*: {data['odometer']} –∫–º\n"
            f"üîÑ *–ü—Ä–æ–±—ñ–≥*: {data['diff']} –∫–º\n"
            f"üèô *–ú—ñ—Å—Ç–æ*: {int(city_km)} –∫–º ‚Üí {c_exact:.2f} –ª (‚âà {c_rounded})\n"
            f"üå≥ *–†–∞–π–æ–Ω*: {int(district_km)} –∫–º ‚Üí {d_exact:.2f} –ª (‚âà {d_rounded})\n"
            f"üõ£ *–¢—Ä–∞—Å–∞*: {int(highway_km)} –∫–º ‚Üí {h_exact:.2f} –ª (‚âà {h_rounded})\n"
            f"‚õΩ *–ó–∞–≥–∞–ª—å–Ω–∏–π –∫—ñ–ª–æ–º–µ—Ç—Ä–∞–∂*: {total_exact:.2f} –ª (‚âà {total_rounded})\n\n"
            f"‚úÖ *–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å?*"
        )

        keyboard = [
            [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_yes"), InlineKeyboardButton("‚ùå –ù—ñ", callback_data="confirm_no")],
            [InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
        ]
        update.message.reply_text(text, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
        context.user_data["state"] = CONFIRM
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –≤–≤—ñ–≤ —Ä–æ–∑–ø–æ–¥—ñ–ª: –º—ñ—Å—Ç–æ={city_km}, —Ä–∞–π–æ–Ω={district_km}, —Ç—Ä–∞—Å–∞={highway_km}")
        return CONFIRM
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª—É: {e}", exc_info=True)
        context.user_data.clear()
        user_data_store.pop(user_id, None)
        update.message.reply_text("üö´ –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π /start.", parse_mode="Markdown")
        return ConversationHandler.END

def confirm_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    logger.debug(f"–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}, —Å—Ç–∞–Ω: {context.user_data.get('state')}")
    
    if query.from_user.id != OWNER_ID:
        query.edit_message_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {user_id}")
        return ConversationHandler.END

    if context.user_data.get("state") != CONFIRM:
        logger.warning(f"–ù–µ–≤—ñ—Ä–Ω–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: {context.user_data.get('state')}")
        context.user_data.clear()
        user_data_store.pop(user_id, None)
        query.edit_message_text("üö´ –ü–æ—á–Ω–∏ –∑ /start –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ '–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å'.", parse_mode="Markdown")
        return ConversationHandler.END

    try:
        if query.data == "confirm_no" or query.data == "cancel":
            user_data_store.pop(user_id, None)
            context.user_data.clear()
            query.edit_message_text("‚ùå *–°–∫–∞—Å–æ–≤–∞–Ω–æ.*", parse_mode="Markdown")
            logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –∑–∞–ø–∏—Å")
            return ConversationHandler.END

        data = user_data_store.pop(user_id, {})
        if not data:
            logger.error("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è")
            context.user_data.clear()
            query.edit_message_text("üö´ –ü–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω–∏ –∑ /start.", parse_mode="Markdown")
            return ConversationHandler.END

        eest = pytz.timezone("Europe/Kiev")
        today = datetime.now(eest).strftime("%d.%m.%Y")
        logger.info(f"–ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ EEST: {today}")

        row = [
            today,
            str(data.get("odometer", "")),
            str(data.get("diff", "")),
            str(int(data.get("city_km", 0))),
            str(data.get("city_exact", 0)).replace('.', ','),
            str(data.get("city_rounded", 0)),
            str(int(data.get("district_km", 0))),
            str(data.get("district_exact", 0)).replace('.', ','),
            str(data.get("district_rounded", 0)),
            str(int(data.get("highway_km", 0))),
            str(data.get("highway_exact", 0)).replace('.', ','),
            str(data.get("highway_rounded", 0)),
            str(data.get("total_exact", 0)).replace('.', ','),
            str(data.get("total_rounded", 0))
        ]

        start_time = time.time()
        sheet.append_row(row)
        row_index = len(sheet_cache) + 1
        cell_format = CellFormat(
            horizontalAlignment='CENTER',
            textFormat=TextFormat(bold=False),
            borders=Borders(
                top={'style': 'SOLID'},
                bottom={'style': 'SOLID'},
                left={'style': 'SOLID'},
                right={'style': 'SOLID'}
            )
        )
        format_cell_range(sheet, f"A{row_index}:N{row_index}", cell_format)
        update_sheet_cache()
        query.edit_message_text(
            f"‚úÖ *–ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ!* üéâ\n"
            f"üìÖ {today} | üìè {data['odometer']} –∫–º | üîÑ {data['diff']} –∫–º | ‚õΩ {data['total_exact']:.2f} –ª",
            parse_mode="Markdown"
        )
        logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} –∑–±–µ—Ä—ñ–≥ –∑–∞–ø–∏—Å: {row} –∑–∞ {time.time() - start_time:.3f} —Å–µ–∫")
        context.user_data.clear()
        return ConversationHandler.END
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {e}", exc_info=True)
        context.user_data.clear()
        user_data_store.pop(user_id, None)
        query.edit_message_text("üö´ –ü–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π /start.", parse_mode="Markdown")
        return ConversationHandler.END

def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    query.answer()
    user_id = query.from_user.id
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
    user_data_store.pop(user_id, None)
    context.user_data.clear()
    query.edit_message_text("‚ùå *–û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.*", parse_mode="Markdown")
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user_id} —Å–∫–∞—Å—É–≤–∞–≤ –æ–ø–µ—Ä–∞—Ü—ñ—é")
    return ConversationHandler.END

def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–ü–æ–º–∏–ª–∫–∞: {context.error}", exc_info=True)
    if update and update.callback_query:
        update.callback_query.answer()
        update.callback_query.edit_message_text("‚ö†Ô∏è *–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.*", parse_mode="Markdown")

def main():
    try:
        logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
        init_telegram_app()
        app.run(host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
