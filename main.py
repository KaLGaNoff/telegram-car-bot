import os
import json
import time
import logging
import warnings
from datetime import datetime, timedelta
import pytz
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
import gspread
from gspread_formatting import CellFormat, TextFormat, Borders, format_cell_range
import telegram
from logging.handlers import TimedRotatingFileHandler
from quart import Quart, request, Response
import urllib.request
import asyncio

# –ü—Ä–∏–¥—É—à–µ–Ω–Ω—è PTBUserWarning
warnings.filterwarnings("ignore", category=telegram.warnings.PTBUserWarning)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# –§—ñ–ª—å—Ç—Ä –¥–ª—è —ñ–≥–Ω–æ—Ä—É–≤–∞–Ω–Ω—è favicon-–∑–∞–ø–∏—Ç—ñ–≤
class FaviconFilter(logging.Filter):
    def filter(self, record):
        return '/favicon' not in record.getMessage()

log_handler = TimedRotatingFileHandler(
    filename="bot.log",
    when="midnight",
    interval=1,
    backupCount=7
)
log_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s"
))
log_handler.addFilter(FaviconFilter())
logger.addHandler(log_handler)

console_handler = logging.StreamHandler()
console_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s"
))
console_handler.addFilter(FaviconFilter())
logger.addHandler(console_handler)

logger.info(f"–í–µ—Ä—Å—ñ—è python-telegram-bot: {telegram.__version__}")

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
OWNER_ID = 270380991
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")
WEBHOOK_URL = os.getenv("WEBHOOK_URL", f"https://{os.getenv('RENDER_EXTERNAL_HOSTNAME')}/webhook")

if not all([TELEGRAM_TOKEN, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_JSON, WEBHOOK_URL]):
    logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è")
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram API
try:
    response = urllib.request.urlopen(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe")
    logger.info(f"Telegram API check: {response.getcode()} OK")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ Telegram API: {e}")
    raise

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
try:
    credentials = json.loads(SERVICE_ACCOUNT_JSON)
    client = gspread.service_account_from_dict(credentials)
    sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Sheets: {e}")
    raise

# –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—ñ
sheet_cache = None

def update_sheet_cache():
    global sheet_cache
    try:
        start_time = time.time()
        sheet_cache = sheet.get_all_values()
        logger.info(f"–ö–µ—à —Ç–∞–±–ª–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {time.time() - start_time:.3f} —Å–µ–∫")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")
        sheet_cache = []

update_sheet_cache()

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRMATION = range(3)
user_data_store = {}

# Quart —Å–µ—Ä–≤–µ—Ä
app = Quart(__name__)
telegram_app = None

async def init_telegram_app():
    global telegram_app
    try:
        telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        logger.info("Telegram Application —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")

        conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(handle_button)],
            states={
                WAITING_FOR_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odometer)],
                WAITING_FOR_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distribution)],
                CONFIRMATION: [CallbackQueryHandler(handle_confirmation)]
            },
            fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")],
            per_user=True,
            per_chat=True,
            per_message=False
        )

        telegram_app.add_handler(CommandHandler("start", start))
        telegram_app.add_handler(CommandHandler("stats", stats))
        telegram_app.add_handler(conv_handler)
        logger.info("–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–æ–¥–∞–Ω–æ")

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        bot_info = await telegram_app.bot.get_me()
        logger.info(f"–ë–æ—Ç —É—Å–ø—ñ—à–Ω–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ: {bot_info.username}")

        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞
        try:
            await telegram_app.bot.set_webhook(url=WEBHOOK_URL)
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {WEBHOOK_URL}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≤–µ–±—Ö—É–∫–∞: {e}")
            raise
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Telegram Application: {e}", exc_info=True)
        raise

@app.before_serving
async def startup():
    await init_telegram_app()

@app.route('/')
async def ping():
    logger.debug(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø—ñ–Ω–≥ –Ω–∞ / –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
    try:
        response = urllib.request.urlopen(f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getMe")
        logger.info(f"Flask ping: Telegram API responded with {response.getcode()}")
        return "Bot is alive", 200
    except Exception as e:
        logger.error(f"Flask ping: Telegram API error: {e}")
        return "Bot is alive, but Telegram API failed", 200

@app.route('/webhook', methods=['POST'])
async def webhook():
    try:
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –≤–µ–±—Ö—É–∫-–∑–∞–ø–∏—Ç –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
        if telegram_app is None:
            logger.error("Telegram Application –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            return Response(status=500)
        json_data = await request.get_json(force=True)
        if not json_data:
            logger.error("JSON –¥–∞–Ω—ñ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ")
            return Response(status=400)
        logger.debug(f"JSON –¥–∞–Ω—ñ: {json_data}")
        update = Update.de_json(json_data, telegram_app.bot)
        if update is None:
            logger.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ—Å–µ—Ä—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è")
            return Response(status=400)
        await telegram_app.process_update(update)
        logger.info("–í–µ–±—Ö—É–∫ –æ–±—Ä–æ–±–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        return Response(status=200)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫–∞: {e}", exc_info=True)
        return Response(status=500)

@app.route('/favicon.ico')
@app.route('/favicon.png')
async def favicon():
    return Response(status=204)

if __name__ == "__main__":
    logger.info(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –æ {datetime.now(pytz.timezone('Europe/Kiev')).strftime('%Y-%m-%d %H:%M:%S %Z%z')}")
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=int(os.getenv("PORT", 8000)))
