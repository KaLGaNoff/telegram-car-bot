import os
import re
import json
import logging
from datetime import datetime

import gspread
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse, JSONResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
from gspread_formatting import (
    CellFormat, TextFormat, Borders, Border, Color, format_cell_range
)

# ---------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
log = logging.getLogger(__name__)

# ---------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏/Secrets ----------------------
OWNER_ID = 270380991

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
if not GOOGLE_SHEET_ID:
    raise RuntimeError("‚ùå GOOGLE_SHEET_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
if not SERVICE_ACCOUNT_JSON:
    raise RuntimeError("‚ùå SERVICE_ACCOUNT_JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

# ---------------------- Google Sheets ----------------------
credentials = json.loads(SERVICE_ACCOUNT_JSON)
client = gspread.service_account_from_dict(credentials)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# ---------------------- –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É ----------------------
WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRMATION = range(3)

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data_store: dict[int, dict] = {}

# ---------------------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ ----------------------
def _int_str(x) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ü—ñ–ª–µ —á–∏—Å–ª–æ —è–∫ —Ä—è–¥–æ–∫ –±–µ–∑ .0"""
    return str(int(float(x)))

def _is_number(s: str) -> bool:
    s = s.strip().replace(",", ".")
    try:
        float(s)
        return True
    except ValueError:
        return False

def _format_new_row_style(row_index: int):
    """–¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–∞–º–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞"""
    try:
        fmt = CellFormat(
            horizontalAlignment='CENTER',
            textFormat=TextFormat(bold=False),
            borders=Borders(
                top=Border(style='SOLID', color=Color(0, 0, 0)),
                bottom=Border(style='SOLID', color=Color(0, 0, 0)),
                left=Border(style='SOLID', color=Color(0, 0, 0)),
                right=Border(style='SOLID', color=Color(0, 0, 0)),
            ),
        )
        # –°—Ç–æ–≤–ø—Ü—ñ A..N (14)
        format_cell_range(sheet, f"A{row_index}:N{row_index}", fmt)
    except Exception as e:
        log.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –¥–æ —Ä—è–¥–∫–∞ %s: %s", row_index, e)

def _nice_last_rows_text(rows: list[list[str]], limit: int = 5) -> str:
    """–ê–∫—É—Ä–∞—Ç–Ω–∏–π –≤–∏–≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ (–±–µ–∑ —à–∞–ø–∫–∏, —è–∫—â–æ –≤–æ–Ω–∞ —î)"""
    data = rows[:]
    if data and data[0] and data[0][0].strip().lower() in ("–¥–∞—Ç–∞", "date"):
        data = data[1:]
    if not data:
        return "üìä –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è."

    tail = data[-limit:]
    lines = ["üìä *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:*\n"]
    # –í—ñ–∑—å–º–µ–º–æ –ø–µ—Ä—à—ñ 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ: –î–∞—Ç–∞ | –û–¥–æ–º–µ—Ç—Ä | –ü—Ä–æ–±—ñ–≥ | –ú—ñ—Å—Ç–æ | –†–æ–∑—Ö—ñ–¥ –º—ñ—Å—Ç–æ
    for r in tail:
        d = (r[0] if len(r) > 0 else "")
        odo = (r[1] if len(r) > 1 else "")
        diff = (r[2] if len(r) > 2 else "")
        city_km = (r[3] if len(r) > 3 else "")
        city_l = (r[4] if len(r) > 4 else "")
        lines.append(f" ‚Ä¢ {d} | {odo} | {diff} | {city_km} | {city_l}")
    return "\n".join(lines)

def _build_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥", callback_data="add")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="delete")],
        [InlineKeyboardButton("üßæ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="last")],
        [InlineKeyboardButton("üìä –ó–≤—ñ—Ç (5 –∑–∞–ø–∏—Å—ñ–≤)", callback_data="report")],
        [InlineKeyboardButton("‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏", callback_data="reset")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)

# ---------------------- –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–æ—Ç–∞ ----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    await update.message.reply_text("üëã –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=_build_menu_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.from_user.id != OWNER_ID:
        await query.edit_message_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return

    data = query.data
    if data == "add":
        await query.edit_message_text("–í–≤–µ–¥–∏ –ø–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä (—á–∏—Å–ª–æ):")
        return WAITING_FOR_ODOMETER

    elif data == "delete":
        rows = sheet.get_all_values()
        if rows and len(rows) >= 1:
            sheet.delete_rows(len(rows))  # –≤–∏–¥–∞–ª—è—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫ (—à–∞–ø–∫—É –Ω–µ —á—ñ–ø–∞—î–º–æ, —è–∫—â–æ —î)
            await query.edit_message_text("üóë –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.edit_message_text("‚ö†Ô∏è –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è.")

    elif data == "report":
        rows = sheet.get_all_values()
        await query.edit_message_text(_nice_last_rows_text(rows), parse_mode="Markdown")

    elif data == "last":
        rows = sheet.get_all_values()
        if not rows or len(rows) <= 1:
            await query.edit_message_text("üßæ –û—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É –Ω–µ–º–∞—î.")
            return
        # –Ø–∫—â–æ —î —à–∞–ø–∫–∞, –±–µ—Ä–µ–º–æ –ø–µ—Ä–µ–¥–æ—Å—Ç–∞–Ω–Ω—ñ–π —ñ–Ω–¥–µ–∫—Å —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–∞–Ω–∏–π —Ä—è–¥–æ–∫
        body = rows[1:] if (rows and rows[0] and rows[0][0].strip().lower() in ("–¥–∞—Ç–∞", "date")) else rows
        last = body[-1] if body else []
        # –†–æ–∑–∫–ª–∞–¥–∞—î–º–æ –∫—Ä–∞—Å–∏–≤–æ
        text = (
            "üßæ *–û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å:*\n"
            f"‚Ä¢ –î–∞—Ç–∞: {last[0] if len(last)>0 else ''}\n"
            f"‚Ä¢ –û–¥–æ–º–µ—Ç—Ä: {last[1] if len(last)>1 else ''}\n"
            f"‚Ä¢ –ü—Ä–æ–±—ñ–≥: {last[2] if len(last)>2 else ''} –∫–º\n"
            f"‚Ä¢ –ú—ñ—Å—Ç–æ: {last[3] if len(last)>3 else ''} –∫–º ‚Üí {last[4] if len(last)>4 else ''} –ª (‚âà {last[5] if len(last)>5 else ''})\n"
            f"‚Ä¢ –†–∞–π–æ–Ω: {last[6] if len(last)>6 else ''} –∫–º ‚Üí {last[7] if len(last)>7 else ''} –ª (‚âà {last[8] if len(last)>8 else ''})\n"
            f"‚Ä¢ –¢—Ä–∞—Å–∞: {last[9] if len(last)>9 else ''} –∫–º ‚Üí {last[10] if len(last)>10 else ''} –ª (‚âà {last[11] if len(last)>11 else ''})\n"
            f"‚Ä¢ –†–∞–∑–æ–º: {last[12] if len(last)>12 else ''} –ª (‚âà {last[13] if len(last)>13 else ''})"
        )
        await query.edit_message_text(text, parse_mode="Markdown")

    elif data == "reset":
        user_data_store.pop(query.from_user.id, None)
        await query.edit_message_text("‚ôªÔ∏è –°—Ç–∞–Ω —Å–∫–∏–Ω—É—Ç–æ.", reply_markup=_build_menu_keyboard())

    elif data == "help":
        await query.edit_message_text(
            "‚ÑπÔ∏è –ù–∞—Ç–∏—Å–Ω–∏ *¬´–î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥¬ª* —ñ –¥–æ—Ç—Ä–∏–º—É–π—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π.\n"
            "‚Ä¢ –û–¥–æ–º–µ—Ç—Ä ‚Äî –ª–∏—à–µ —á–∏—Å–ª–æ\n"
            "‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–∏–∫–ª–∞–¥: `–º—ñ—Å—Ç–æ 50 —Ä–∞–π–æ–Ω 30 —Ç—Ä–∞—Å–∞ 20`\n"
            "‚Ä¢ –†–æ–∑–ø–æ–¥—ñ–ª –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥—É –∑–∞ –ø–µ—Ä—ñ–æ–¥\n",
            parse_mode="Markdown"
        )

# –ö—Ä–æ–∫ 1 ‚Äî –í–≤–µ–¥–µ–Ω–Ω—è –æ–¥–æ–º–µ—Ç—Ä–∞
async def handle_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not _is_number(text):
        await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä. `53200`", parse_mode="Markdown")
        return WAITING_FOR_ODOMETER

    odometer = int(float(text.replace(",", ".")))
    rows = sheet.get_all_values()

    if len(rows) >= 2:
        prev_odo = int(float(rows[-1][1]))
    else:
        prev_odo = 0

    diff = odometer - prev_odo
    if diff <= 0:
        await update.message.reply_text("‚ùóÔ∏è –û–¥–æ–º–µ—Ç—Ä –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–∏–π –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π.")
        return WAITING_FOR_ODOMETER

    user_data_store[update.effective_user.id] = {"odometer": odometer, "diff": diff}

    await update.message.reply_text(
        f"üìè –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –æ–¥–æ–º–µ—Ç—Ä: {prev_odo}\n"
        f"üìç –ü–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä: {odometer}\n"
        f"üîÑ –ü—Ä–æ–±—ñ–≥ –∑–∞ –ø–µ—Ä—ñ–æ–¥: {diff} –∫–º\n\n"
        "üõ£ –í–≤–µ–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–±—ñ–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: `–º—ñ—Å—Ç–æ 50 —Ä–∞–π–æ–Ω 30 —Ç—Ä–∞—Å–∞ 6`):",
        parse_mode="Markdown"
    )
    return WAITING_FOR_DISTRIBUTION

# –ö—Ä–æ–∫ 2 ‚Äî –í–≤–µ–¥–µ–Ω–Ω—è —Ä–æ–∑–ø–æ–¥—ñ–ª—É
async def handle_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    user_id = update.effective_user.id
    data = user_data_store.get(user_id, {})

    if not data:
        await update.message.reply_text("‚ö†Ô∏è –î–∞–Ω—ñ –∑–∞–≥—É–±–ª–µ–Ω–æ. –ü–æ—á–Ω–∏ –∑–Ω–æ–≤—É.")
        return ConversationHandler.END

    # –®—É–∫–∞—î–º–æ —Ü—ñ–ª—ñ —á–∏—Å–ª–∞ –ø—ñ—Å–ª—è –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ (–º—ñ—Å—Ç–æ|—Ä–∞–π–æ–Ω|—Ç—Ä–∞—Å–∞)
    city_km = district_km = highway_km = 0
    for name, value in re.findall(r"(–º—ñ—Å—Ç–æ|—Ä–∞–π–æ–Ω|—Ç—Ä–∞—Å[–∞–∏—ñ])\s+(\d+)", text, flags=re.IGNORECASE):
        if name.startswith("–º—ñ—Å—Ç"):
            city_km = int(value)
        elif name.startswith("—Ä–∞–π–æ–Ω"):
            district_km = int(value)
        else:
            highway_km = int(value)

    total_entered = city_km + district_km + highway_km
    if total_entered != data["diff"]:
        await update.message.reply_text(
            f"‚ö†Ô∏è –°—É–º–∞ ({total_entered}) –Ω–µ –¥–æ—Ä—ñ–≤–Ω—é—î –ø—Ä–æ–±—ñ–≥—É –∑–∞ –ø–µ—Ä—ñ–æ–¥ ({data['diff']}). –í–∏–ø—Ä–∞–≤."
        )
        return WAITING_FOR_DISTRIBUTION

    # –§–æ—Ä–º—É–ª–∏ —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É (–ª/100–∫–º)
    def calc(l_per_100, km):
        exact = round(km * l_per_100 / 100, 4)
        rounded = round(exact)
        return exact, rounded

    c_exact, c_rounded = calc(11.66, city_km)
    d_exact, d_rounded = calc(11.17, district_km)
    h_exact, h_rounded = calc(10.19, highway_km)
    total_exact = round(c_exact + d_exact + h_exact, 4)
    total_rounded = round(total_exact)

    data.update({
        "city_km": city_km, "city_exact": c_exact, "city_rounded": c_rounded,
        "district_km": district_km, "district_exact": d_exact, "district_rounded": d_rounded,
        "highway_km": highway_km, "highway_exact": h_exact, "highway_rounded": h_rounded,
        "total_exact": total_exact, "total_rounded": total_rounded
    })
    user_data_store[user_id] = data

    summary = (
        "üìã *–ù–æ–≤–∏–π –∑–∞–ø–∏—Å:*\n"
        f"‚Ä¢ –û–¥–æ–º–µ—Ç—Ä: {data['odometer']}\n"
        f"‚Ä¢ –ü—Ä–æ–±—ñ–≥: {data['diff']} –∫–º\n"
        f"‚Ä¢ –ú—ñ—Å—Ç–æ: {city_km} –∫–º ‚Üí {c_exact} –ª (‚âà {c_rounded})\n"
        f"‚Ä¢ –†–∞–π–æ–Ω: {district_km} –∫–º ‚Üí {d_exact} –ª (‚âà {d_rounded})\n"
        f"‚Ä¢ –¢—Ä–∞—Å–∞: {highway_km} –∫–º ‚Üí {h_exact} –ª (‚âà {h_rounded})\n"
        f"‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {total_exact} –ª (‚âà {total_rounded})\n\n"
        "‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏?"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –¢–∞–∫", callback_data="confirm_yes")],
        [InlineKeyboardButton("‚ùå –ù—ñ", callback_data="confirm_no")]
    ]
    await update.message.reply_text(summary, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRMATION

# –ö—Ä–æ–∫ 3 ‚Äî –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "confirm_no":
        user_data_store.pop(user_id, None)
        await query.edit_message_text("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=_build_menu_keyboard())
        return ConversationHandler.END

    data = user_data_store.pop(user_id, {})
    if not data:
        await query.edit_message_text("‚ö†Ô∏è –î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", reply_markup=_build_menu_keyboard())
        return ConversationHandler.END

    today = datetime.now().strftime("%d.%m.%Y")
    row = [
        today,
        str(data["odometer"]),
        str(data["diff"]),
        str(int(data["city_km"])),
        str(data["city_exact"]).replace('.', ','),
        str(data["city_rounded"]),
        str(int(data["district_km"])),
        str(data["district_exact"]).replace('.', ','),
        str(data["district_rounded"]),
        str(int(data["highway_km"])),
        str(data["highway_exact"]).replace('.', ','),
        str(data["highway_rounded"]),
        str(data["total_exact"]).replace('.', ','),
        str(data["total_rounded"])
    ]
    sheet.append_row(row)
    # –í–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è —Ç–∞ —Ä–∞–º–∫–∞ –¥–ª—è –¥–æ–¥–∞–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    row_index = len(sheet.get_all_values())
    _format_new_row_style(row_index)

    await query.edit_message_text("‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=_build_menu_keyboard())
    return ConversationHandler.END

# ---------------------- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PTB Application ----------------------
telegram_app: Application | None = None

def _build_telegram_app() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(handle_button)],
        states={
            WAITING_FOR_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odometer)],
            WAITING_FOR_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distribution)],
            CONFIRMATION: [CallbackQueryHandler(handle_confirmation, pattern="^confirm_(yes|no)$")]
        },
        fallbacks=[]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)
    return app

# ---------------------- FastAPI (Render) ----------------------
app = FastAPI()

@app.on_event("startup")
async def on_startup():
    global telegram_app
    telegram_app = _build_telegram_app()
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–∞ —Å—Ç–∞—Ä—Ç—É—î–º–æ PTB-–¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è –º–∞–Ω—É–∞–ª—å–Ω–æ—ó –æ–±—Ä–æ–±–∫–∏ –∞–ø–¥–µ–π—Ç—ñ–≤
    await telegram_app.initialize()
    await telegram_app.start()

    # –í–µ–±—Ö—É–∫
    base = os.getenv("WEBHOOK_URL") or os.getenv("RENDER_EXTERNAL_URL")
    if base:
        webhook_url = base.rstrip("/") + "/webhook"
        await telegram_app.bot.set_webhook(url=webhook_url)
        log.info("–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s", webhook_url)
    else:
        log.warning("WEBHOOK_URL/RENDER_EXTERNAL_URL –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äì –≤–µ–±—Ö—É–∫ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

@app.on_event("shutdown")
async def on_shutdown():
    global telegram_app
    if telegram_app:
        try:
            await telegram_app.bot.delete_webhook(drop_pending_updates=False)
        except Exception as e:
            log.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–µ–±—Ö—É–∫: %s", e)
        await telegram_app.stop()
        await telegram_app.shutdown()
        telegram_app = None

# Healthcheck
@app.get("/", response_class=PlainTextResponse)
async def root_get():
    return "Bot is running"

@app.head("/", response_class=PlainTextResponse)
async def root_head():
    return ""

# –ü—Ä–∏–π–æ–º –∞–ø–¥–µ–π—Ç—ñ–≤ –≤—ñ–¥ Telegram
@app.post("/webhook")
async def webhook(request: Request):
    if telegram_app is None:
        log.error("Telegram Application –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
        return JSONResponse({"ok": False, "error": "app_not_initialized"}, status_code=500)

    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}
