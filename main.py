import os
import json
import time
import logging
import warnings
import gspread
from datetime import datetime, timedelta
import pytz
import threading
import asyncio
from queue import Queue
import requests
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ContextTypes, ConversationHandler
)

# –ü—Ä–∏–¥—É—à–µ–Ω–Ω—è PTBUserWarning
warnings.filterwarnings("ignore", category=UserWarning)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

class FaviconFilter(logging.Filter):
    def filter(self, record):
        return '/favicon' not in record.getMessage()

log_handler = logging.StreamHandler()
log_handler.setFormatter(logging.Formatter(
    "%(asctime)s - %(levelname)s - %(message)s"
))
log_handler.addFilter(FaviconFilter())
logger.addHandler(log_handler)

logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è...")

# –ó–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è
OWNER_ID = 270380991
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")
RENDER_PORT = os.getenv("PORT", "10000")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

if not all([TELEGRAM_TOKEN, GOOGLE_SHEET_ID, SERVICE_ACCOUNT_JSON, WEBHOOK_URL]):
    logger.error("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è")
    raise ValueError("–í—ñ–¥—Å—É—Ç–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ –æ—Ç–æ—á–µ–Ω–Ω—è")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Google Sheets
try:
    credentials = json.loads(SERVICE_ACCOUNT_JSON)
    client = gspread.service_account_from_dict(credentials)
    sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1
    logger.info("–£—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ Google Sheets")
except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Google Sheets: {e}")
    raise

# –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —Ç–∞–±–ª–∏—Ü—ñ
sheet_cache = None

def update_sheet_cache():
    global sheet_cache
    try:
        start_time = time.time()
        sheet_cache = sheet.get_all_values()
        logger.info(f"–ö–µ—à —Ç–∞–±–ª–∏—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {time.time() - start_time:.3f} —Å–µ–∫")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–µ—à—É: {e}")
        sheet_cache = []

update_sheet_cache()

# –°—Ç–∞–Ω–∏ –¥–ª—è ConversationHandler
WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRMATION = range(3)
user_data_store = {}

# –ß–µ—Ä–≥–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω—å
update_queue = Queue()

# –°—Ç–≤–æ—Ä—é—î–º–æ Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ Application –¥–ª—è –±–æ—Ç–∞
application = Application.builder().token(TELEGRAM_TOKEN).build()

# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
def generate_progress_bar(percent, width=10):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç–æ–≤—É —Å–º—É–≥—É –ø—Ä–æ–≥—Ä–µ—Å—É"""
    filled = int(round(width * percent / 100))
    return "üü©" * filled + "‚¨ú" * (width - filled)

def calculate_statistics():
    """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ –æ—Å–Ω–æ–≤—ñ –¥–∞–Ω–∏—Ö –∑ —Ç–∞–±–ª–∏—Ü—ñ"""
    if not sheet_cache or len(sheet_cache) <= 1:
        return None
    
    total_distance = 0
    city_km = district_km = highway_km = 0
    city_fuel = district_fuel = highway_fuel = 0
    days = set()
    
    for row in sheet_cache[1:]:
        try:
            date_str = row[0]
            days.add(date_str)
            
            if row[2]: total_distance += float(row[2])
            if row[3]: city_km += float(row[3])
            if row[6]: district_km += float(row[6])
            if row[9]: highway_km += float(row[9])
            if row[4]: city_fuel += float(row[4].replace(',', '.'))
            if row[7]: district_fuel += float(row[7].replace(',', '.'))
            if row[10]: highway_fuel += float(row[10].replace(',', '.'))
        except (ValueError, IndexError):
            continue
    
    total_km = city_km + district_km + highway_km
    city_percent = (city_km / total_km * 100) if total_km else 0
    district_percent = (district_km / total_km * 100) if total_km else 0
    highway_percent = (highway_km / total_km * 100) if total_km else 0
    
    return {
        'total_distance': total_distance,
        'city_km': city_km, 'city_percent': city_percent, 'city_fuel': city_fuel,
        'district_km': district_km, 'district_percent': district_percent, 'district_fuel': district_fuel,
        'highway_km': highway_km, 'highway_percent': highway_percent, 'highway_fuel': highway_fuel,
        'days_count': len(days)
    }

# –§—É–Ω–∫—Ü—ñ—ó –æ–±—Ä–æ–±–Ω–∏–∫–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É /start –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {update.effective_user.id}")
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.*", parse_mode="Markdown")
        logger.warning(f"–ù–µ—Å–∞–Ω–∫—Ü—ñ–æ–Ω–æ–≤–∞–Ω–∏–π –¥–æ—Å—Ç—É–ø: {update.effective_user.id}")
        return

    keyboard = [
        [InlineKeyboardButton("üü¢ –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥", callback_data="add"), InlineKeyboardButton("üî¥ –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete")],
        [InlineKeyboardButton("üìä –ó–≤—ñ—Ç –∑–∞ –º—ñ—Å—è—Ü—å", callback_data="report"), InlineKeyboardButton("üßæ –û—Å—Ç–∞–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∞", callback_data="last")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"), InlineKeyboardButton("‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏", callback_data="reset")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")]
    ]
    await update.message.reply_text(
        "üöó *–í—ñ—Ç–∞—é —É —Ç–≤–æ—î–º—É –∞–≤—Ç–æ-–±–æ—Ç—ñ!* üëã\n–û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )
    logger.info(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–≤ –±–æ—Ç–∞")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /stats —Ç–∞ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥ {update.effective_user.id}")
    
    if update.effective_user.id != OWNER_ID:
        if hasattr(update, 'message'):
            await update.message.reply_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        else:
            await update.callback_query.edit_message_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        return

    stats_data = calculate_statistics()
    if not stats_data:
        response = "üìä *–©–µ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*"
        if hasattr(update, 'message'):
            await update.message.reply_text(response, parse_mode="Markdown")
        else:
            await update.callback_query.edit_message_text(response, parse_mode="Markdown")
        return

    try:
        avg_daily = stats_data['total_distance'] / stats_data['days_count'] if stats_data['days_count'] else 0
        
        stats_text = (
            f"üìä *–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üìè *–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥:* {stats_data['total_distance']:.1f} –∫–º\n"
            f"üìÖ *–î–Ω—ñ–≤ –∑ –∑–∞–ø–∏—Å–∞–º–∏:* {stats_data['days_count']}\n"
            f"üìà *–°–µ—Ä–µ–¥–Ω—å–æ–¥–æ–±–æ–≤–∏–π –ø—Ä–æ–±—ñ–≥:* {avg_daily:.1f} –∫–º\n\n"
            f"‚õΩ *–†–æ–∑–ø–æ–¥—ñ–ª –∑–∞ —Ç–∏–ø–∞–º–∏ –¥–æ—Ä—ñ–≥:*\n"
            f"üèô *–ú—ñ—Å—Ç–æ:* {stats_data['city_km']:.1f} –∫–º ({stats_data['city_percent']:.1f}%) {generate_progress_bar(stats_data['city_percent'])}\n"
            f"üå≥ *–†–∞–π–æ–Ω:* {stats_data['district_km']:.1f} –∫–º ({stats_data['district_percent']:.1f}%) {generate_progress_bar(stats_data['district_percent'])}\n"
            f"üõ£ *–¢—Ä–∞—Å–∞:* {stats_data['highway_km']:.1f} –∫–º ({stats_data['highway_percent']:.1f}%) {generate_progress_bar(stats_data['highway_percent'])}\n\n"
            f"üîã *–í–∏—Ç—Ä–∞—Ç–∏ –ø–∞–ª–∏–≤–∞:*\n"
            f"‚Ä¢ –ú—ñ—Å—Ç–æ: {stats_data['city_fuel']:.1f} –ª\n"
            f"‚Ä¢ –†–∞–π–æ–Ω: {stats_data['district_fuel']:.1f} –ª\n"
            f"‚Ä¢ –¢—Ä–∞—Å–∞: {stats_data['highway_fuel']:.1f} –ª\n"
            f"‚Ä¢ –ó–∞–≥–∞–ª–æ–º: {stats_data['city_fuel'] + stats_data['district_fuel'] + stats_data['highway_fuel']:.1f} –ª"
        )
        
        if hasattr(update, 'message'):
            await update.message.reply_text(stats_text, parse_mode="Markdown")
        else:
            await update.callback_query.edit_message_text(stats_text, parse_mode="Markdown")
            
    except Exception as e:
        error_msg = "‚ùå *–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*"
        if hasattr(update, 'message'):
            await update.message.reply_text(error_msg, parse_mode="Markdown")
        else:
            await update.callback_query.edit_message_text(error_msg, parse_mode="Markdown")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

async def handle_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –∑–≤—ñ—Ç—É –∑–∞ –º—ñ—Å—è—Ü—å"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != OWNER_ID:
        await query.edit_message_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        return

    try:
        # –ê–Ω–∞–ª—ñ–∑ –¥–∞–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤
        eest = pytz.timezone("Europe/Kiev")
        today = datetime.now(eest)
        month_ago = today - timedelta(days=30)
        
        monthly_distance = 0
        monthly_fuel = 0
        days_with_data = 0
        
        for row in sheet_cache[1:]:
            try:
                row_date = datetime.strptime(row[0], "%d.%m.%Y").replace(tzinfo=eest)
                if row_date >= month_ago:
                    if row[2]: monthly_distance += float(row[2])
                    if row[12]: monthly_fuel += float(row[12].replace(',', '.'))
                    days_with_data += 1
            except (ValueError, IndexError):
                continue
        
        avg_consumption = (monthly_fuel / monthly_distance * 100) if monthly_distance else 0
        
        report_text = (
            f"üìã *–ó–≤—ñ—Ç –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤*\n\n"
            f"üìÖ –ü–µ—Ä—ñ–æ–¥: {month_ago.strftime('%d.%m')} - {today.strftime('%d.%m.%Y')}\n"
            f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–±—ñ–≥: {monthly_distance:.1f} –∫–º\n"
            f"‚õΩ –í–∏—Ç—Ä–∞—á–µ–Ω–æ –ø–∞–ª–∏–≤–∞: {monthly_fuel:.1f} –ª\n"
            f"üìà –°–µ—Ä–µ–¥–Ω—è –≤–∏—Ç—Ä–∞—Ç–∞: {avg_consumption:.1f} –ª/100–∫–º\n"
            f"üìÖ –î–Ω—ñ–≤ –∑ –ø–æ—ó–∑–¥–∫–∞–º–∏: {days_with_data}\n\n"
            f"üèÜ *–ü–æ–∫–∞–∑–Ω–∏–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ:*\n"
            f"‚Ä¢ –©–æ–¥–µ–Ω–Ω–∏–π –ø—Ä–æ–±—ñ–≥: {monthly_distance/30:.1f} –∫–º/–¥–µ–Ω—å\n"
            f"‚Ä¢ –í–∏—Ç—Ä–∞—Ç–∏ –Ω–∞ –ø–∞–ª–∏–≤–æ: ~{monthly_fuel * 54:.0f} –≥—Ä–Ω\n"
            f"‚Ä¢ –ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å: {'üü¢' if avg_consumption < 11 else 'üü°' if avg_consumption < 13 else 'üî¥'}"
        )
        
        await query.edit_message_text(report_text, parse_mode="Markdown")
        
    except Exception as e:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—É")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–≤—ñ—Ç—É: {e}")

async def handle_last(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–æ—ó–∑–¥–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.from_user.id != OWNER_ID:
        await query.edit_message_text("‚ùå *–£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.*", parse_mode="Markdown")
        return

    try:
        if not sheet_cache or len(sheet_cache) < 2:
            await query.edit_message_text("üì≠ *–ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –ø–æ—ó–∑–¥–∫–∏*")
            return
            
        last_row = sheet_cache[-1]
        prev_row = sheet_cache[-2] if len(sheet_cache) >= 3 else None
        
        last_trip_text = (
            f"üßæ *–û—Å—Ç–∞–Ω–Ω—è –ø–æ—ó–∑–¥–∫–∞*\n\n"
            f"üìÖ –î–∞—Ç–∞: {last_row[0]}\n"
            f"üìè –û–¥–æ–º–µ—Ç—Ä: {last_row[1]} –∫–º\n"
            f"üîÑ –ü–æ–¥–æ–ª–∞–Ω–æ: {last_row[2]} –∫–º\n"
            f"‚õΩ –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {last_row[12]} –ª\n\n"
            f"üõ£ *–†–æ–∑–ø–æ–¥—ñ–ª:*\n"
            f"‚Ä¢ –ú—ñ—Å—Ç–æ: {last_row[3]} –∫–º\n"
            f"‚Ä¢ –†–∞–π–æ–Ω: {last_row[6]} –∫–º\n"
            f"‚Ä¢ –¢—Ä–∞—Å–∞: {last_row[9]} –∫–º\n"
        )
        
        if prev_row:
            try:
                prev_odo = float(prev_row[1])
                last_odo = float(last_row[1])
                efficiency = "üü¢ –ö—Ä–∞—â–µ" if (last_odo - prev_odo) > (float(prev_row[1]) - float(sheet_cache[-3][1])) else "üü° –°—Ç–∞–±—ñ–ª—å–Ω–æ"
                last_trip_text += f"\nüìä *–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è:* {efficiency}"
            except (ValueError, IndexError):
                pass
                
        await query.edit_message_text(last_trip_text, parse_mode="Markdown")
        
    except Exception as e:
        await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö")
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –∑–∞–ø–∏—Å—É: {e}")

# –†–µ—à—Ç–∞ —Ñ—É–Ω–∫—Ü—ñ–π (handle_button, handle_odometer, handle_distribution, handle_confirmation, cancel) –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏
# [–í–°–¢–ê–í–¢–ï –¢–£–¢ –†–ï–®–¢–£ –§–£–ù–ö–¶–Ü–ô –ó –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –ö–û–î–£]

# –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ application
conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_button)],
    states={
        WAITING_FOR_ODOMETER: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odometer)],
        WAITING_FOR_DISTRIBUTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distribution)],
        CONFIRMATION: [CallbackQueryHandler(handle_confirmation)]
    },
    fallbacks=[CallbackQueryHandler(cancel, pattern="^cancel$")],
    per_user=True,
    per_chat=True,
    per_message=False
)

application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("stats", stats))
application.add_handler(conv_handler)

# –ú–∞—Ä—à—Ä—É—Ç–∏ Flask —Ç–∞ —Ä–µ—à—Ç–∞ –∫–æ–¥—É –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –Ω–µ–∑–º—ñ–Ω–Ω–∏–º–∏
# [–í–°–¢–ê–í–¢–ï –¢–£–¢ –†–ï–®–¢–£ –ö–û–î–£ –ó –ü–û–ü–ï–†–ï–î–ù–¨–û–ì–û –í–Ü–î–ü–û–í–Ü–î–Ü]
