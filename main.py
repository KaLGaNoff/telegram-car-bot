import os
import re
import json
import logging
from datetime import datetime

import gspread
from fastapi import FastAPI, Request
from fastapi.responses import PlainTextResponse, JSONResponse
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, MessageHandler,
    filters, ConversationHandler, ContextTypes
)
from gspread_formatting import (
    CellFormat, TextFormat, Borders, Border, Color, format_cell_range
)

# ---------------------- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è ----------------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
log = logging.getLogger(__name__)

# ---------------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏/Secrets ----------------------
OWNER_ID = 270380991

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")

if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
if not GOOGLE_SHEET_ID:
    raise RuntimeError("‚ùå GOOGLE_SHEET_ID –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")
if not SERVICE_ACCOUNT_JSON:
    raise RuntimeError("‚ùå SERVICE_ACCOUNT_JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞")

# ---------------------- Google Sheets ----------------------
credentials = json.loads(SERVICE_ACCOUNT_JSON)
client = gspread.service_account_from_dict(credentials)
sheet = client.open_by_key(GOOGLE_SHEET_ID).sheet1

# ---------------------- –°—Ç–∞–Ω–∏ –¥—ñ–∞–ª–æ–≥—É ----------------------
WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRMATION = range(3)

# –¢–∏–º—á–∞—Å–æ–≤—ñ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_data_store: dict[int, dict] = {}

# ---------------------- –î–æ–ø–æ–º—ñ–∂–Ω—ñ ----------------------
def _int_str(x) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —Ü—ñ–ª–µ —á–∏—Å–ª–æ —è–∫ —Ä—è–¥–æ–∫ –±–µ–∑ .0"""
    return str(int(float(x)))

def _is_number(s: str) -> bool:
    s = s.strip().replace(",", ".")
    try:
        float(s)
        return True
    except ValueError:
        return False

def _format_new_row_style(row_index: int):
    """–¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è —Ç–∞ —Ä–∞–º–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞"""
    try:
        fmt = CellFormat(
            horizontalAlignment='CENTER',
            textFormat=TextFormat(bold=False),
            borders=Borders(
                top=Border(style='SOLID', color=Color(0, 0, 0)),
                bottom=Border(style='SOLID', color=Color(0, 0, 0)),
                left=Border(style='SOLID', color=Color(0, 0, 0)),
                right=Border(style='SOLID', color=Color(0, 0, 0)),
            ),
        )
        # –°—Ç–æ–≤–ø—Ü—ñ A..N (14)
        format_cell_range(sheet, f"A{row_index}:N{row_index}", fmt)
    except Exception as e:
        log.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞—Å—Ç–æ—Å—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –¥–æ —Ä—è–¥–∫–∞ %s: %s", row_index, e)

def _nice_last_rows_text(rows: list[list[str]], limit: int = 5) -> str:
    """–ê–∫—É—Ä–∞—Ç–Ω–∏–π –≤–∏–≤—ñ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ (–±–µ–∑ —à–∞–ø–∫–∏, —è–∫—â–æ –≤–æ–Ω–∞ —î)"""
    data = rows[:]
    if data and data[0] and data[0][0].strip().lower() in ("–¥–∞—Ç–∞", "date"):
        data = data[1:]
    if not data:
        return "üìä –¢–∞–±–ª–∏—Ü—è –ø–æ—Ä–æ–∂–Ω—è."

    tail = data[-limit:]
    lines = ["üìä *–û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:*\n"]
    # –í—ñ–∑—å–º–µ–º–æ –ø–µ—Ä—à—ñ 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ: –î–∞—Ç–∞ | –û–¥–æ–º–µ—Ç—Ä | –ü—Ä–æ–±—ñ–≥ | –ú—ñ—Å—Ç–æ | –†–æ–∑—Ö—ñ–¥ –º—ñ—Å—Ç–æ
    for r in tail:
        d = (r[0] if len(r) > 0 else "")
        odo = (r[1] if len(r) > 1 else "")
        diff = (r[2] if len(r) > 2 else "")
        city_km = (r[3] if len(r) > 3 else "")
        city_l = (r[4] if len(r) > 4 else "")
        lines.append(f" ‚Ä¢ {d} | {odo} | {diff} | {city_km} | {city_l}")
    return "\n".join(lines)

def _build_menu_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥", callback_data="add")],
        [InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="delete")],
        [InlineKeyboardButton("üßæ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="last")],
        [InlineKeyboardButton("üìä –ó–≤—ñ—Ç (5 –∑–∞–ø–∏—Å—ñ–≤)", callback_data="report")],
        [InlineKeyboardButton("‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏", callback_data="reset")],
        [InlineKeyboardButton("‚ÑπÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
    ]
    return InlineKeyboardMarkup(keyboard)

# ---------------------- –û–±—Ä–æ–±–Ω–∏–∫–∏ –±–æ—Ç–∞ ----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—å–æ–≥–æ –±–æ—Ç–∞.")
        return
    await update.message.reply_text("üëã –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=_build_menu_keyboard())

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
