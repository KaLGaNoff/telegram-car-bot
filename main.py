# main.py
import os
import re
import json
import math
import pytz
import asyncio
import logging
from datetime import datetime

from starlette.applications import Starlette
from starlette.requests import Request
from starlette.responses import Response, PlainTextResponse, JSONResponse
from starlette.routing import Route

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application,
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

import gspread
from google.oauth2.service_account import Credentials
from gspread_formatting import CellFormat, Borders, format_cell_range, TextFormat

# -------------------------
# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏
# -------------------------
tz = pytz.timezone("Europe/Kiev")
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger("bot")

OWNER_ID = int(os.getenv("OWNER_ID", "0"))  # —è–∫—â–æ 0 ‚Äî –¥–æ—Å—Ç—É–ø –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # –Ω–µ –∑–º—ñ–Ω—é–≤–∞–≤ –Ω–∞–∑–≤—É
GOOGLE_SHEET_ID = os.getenv("GOOGLE_SHEET_ID")
SERVICE_ACCOUNT_JSON = os.getenv("SERVICE_ACCOUNT_JSON")

# –æ–ø—Ü—ñ–π–Ω–æ (–ª—ñ—Ç—Ä–∏ –Ω–∞ 100 –∫–º). –Ø–∫—â–æ –Ω–µ –≤–∫–∞–∑–∞–Ω—ñ ‚Äî —Ä–æ–∑—É–º–Ω—ñ –¥–µ—Ñ–æ–ª—Ç–∏
CITY_L100 = float(os.getenv("CITY_L_PER_100", "12"))
DISTRICT_L100 = float(os.getenv("DISTRICT_L_PER_100", "9"))
HIGHWAY_L100 = float(os.getenv("HIGHWAY_L_PER_100", "7"))

# –°—Ç–∞–Ω–∏ —Ä–æ–∑–º–æ–≤–∏
WAITING_FOR_ODOMETER, WAITING_FOR_DISTRIBUTION, CONFIRM = range(3)

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
telegram_app: Application | None = None
gc = None
worksheet = None

# –¢—É—Ç —Ç–∏–º—á–∞—Å–æ–≤–æ —Ç—Ä–∏–º–∞—î–º–æ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏
user_data_store: dict[int, dict] = {}

# -------------------------
# –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
# -------------------------
def _build_webhook_url() -> str:
    """
    –ù–æ—Ä–º–∞–ª—ñ–∑—É—î URL –≤–µ–±—Ö—É–∫–∞ —Ç–∞–∫, —â–æ–± –∑–∞–∫—ñ–Ω—á—É–≤–∞–≤—Å—è —Ä—ñ–≤–Ω–æ –Ω–∞ '/webhook'.
    –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç: WEBHOOK_URL -> RENDER_EXTERNAL_HOSTNAME.
    """
    env_url = os.getenv("WEBHOOK_URL")
    if env_url:
        url = env_url.strip()
    else:
        host = os.getenv("RENDER_EXTERNAL_HOSTNAME", "").strip()
        if not host:
            raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ WEBHOOK_URL –∞–±–æ RENDER_EXTERNAL_HOSTNAME")
        if not host.startswith("http"):
            url = f"https://{host}"
        else:
            url = host

    url = url.rstrip("/")  # –ø—Ä–∏–±–∏—Ä–∞—î–º–æ —Ö–≤–æ—Å—Ç–∏
    # —è–∫—â–æ —Ö—Ç–æ—Å—å –∑–∞–¥–∞–≤ .../webhook/webhook ‚Äî –ø—Ä–∏–≤–æ–¥–∏–º–æ –¥–æ –æ–¥–Ω–æ–≥–æ
    if url.endswith("/webhook/webhook"):
        url = url[:-8]  # –∑—Ä—ñ–∑–∞—î–º–æ –æ–¥–∏–Ω '/webhook'
    if not url.endswith("/webhook"):
        url = f"{url}/webhook"
    return url


def _authorize_gspread():
    global gc, worksheet
    if not (GOOGLE_SHEET_ID and SERVICE_ACCOUNT_JSON):
        raise RuntimeError("–ù–µ–º–∞—î GOOGLE_SHEET_ID –∞–±–æ SERVICE_ACCOUNT_JSON")
    creds_info = json.loads(SERVICE_ACCOUNT_JSON)
    scopes = [
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive",
    ]
    creds = Credentials.from_service_account_info(creds_info, scopes=scopes)
    gc = gspread.authorize(creds)
    sh = gc.open_by_key(GOOGLE_SHEET_ID)
    worksheet = sh.sheet1  # –ª–∏—à–∞—é —è–∫ –±—É–ª–æ (–ø–µ—Ä—à–∏–π –∞—Ä–∫—É—à)


def _last_row_index() -> int:
    vals = worksheet.get_all_values()
    return len(vals)  # 1-based


def _get_last_odometer() -> int | None:
    vals = worksheet.get_all_values()
    if len(vals) <= 1:
        return None
    *_, last = vals
    try:
        return int(last[1])  # –ö–æ–ª–æ–Ω–∫–∞ B ‚Äî –æ–¥–æ–º–µ—Ç—Ä (—è–∫ —É —Ç–≤–æ—ó–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ñ)
    except Exception:
        return None


def _parse_distribution(text: str, total_km: int) -> tuple[int, int, int] | None:
    """
    –ü—ñ–¥—Ç—Ä–∏–º—É—î:
      - "–º—ñ—Å—Ç–æ 50 —Ä–∞–π–æ–Ω 30 —Ç—Ä–∞—Å–∞ 20"
      - "–º 50 —Ä 30 —Ç 20"
      - "50/30/20" –∞–±–æ "50 30 20"
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —â–æ —Å—É–º–∞ –¥–æ—Ä—ñ–≤–Ω—é—î total_km.
    """
    t = text.lower().strip()

    # –≤–∞—Ä—ñ–∞–Ω—Ç 50/30/20 –∞–±–æ "50 30 20"
    m = re.findall(r"\d+", t)
    if len(m) == 3 and all(s.isdigit() for s in m):
        a, b, c = map(int, m[:3])
        if a + b + c == total_km:
            return a, b, c

    # –≤–∞—Ä—ñ–∞–Ω—Ç –∑ –º—ñ—Ç–∫–∞–º–∏
    city = district = highway = None

    # –º—ñ—Å—Ç–æ
    m_city = re.search(r"(–º—ñ—Å—Ç–æ|–≥–æ—Ä–æ–¥|–º)\s*(\d+)", t)
    if m_city:
        city = int(m_city.group(2))
    # —Ä–∞–π–æ–Ω
    m_dist = re.search(r"(—Ä–∞–π–æ–Ω|—Ä)\s*(\d+)", t)
    if m_dist:
        district = int(m_dist.group(2))
    # —Ç—Ä–∞—Å–∞/—à–æ—Å–µ
    m_high = re.search(r"(—Ç—Ä–∞—Å–∞|—à–æ—Å–µ|—Ç)\s*(\d+)", t)
    if m_high:
        highway = int(m_high.group(2))

    parts = [city, district, highway]
    if all(v is not None for v in parts) and sum(parts) == total_km:
        return city, district, highway

    return None


def _fmt(dt_: datetime) -> str:
    return dt_.astimezone(tz).strftime("%Y-%m-%d %H:%M:%S %Z")


def _format_just_added_row(row_index: int):
    """–¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è + —Ä–∞–º–∫–∏ –ø–æ –≤—Å—ñ–π –Ω–æ–≤—ñ–π —Å—Ç—Ä—ñ—á—Ü—ñ A..N."""
    cell_fmt = CellFormat(
        textFormat=TextFormat(bold=False),
        horizontalAlignment="CENTER",
        borders=Borders(
            top={"style": "SOLID"},
            bottom={"style": "SOLID"},
            left={"style": "SOLID"},
            right={"style": "SOLID"},
        ),
    )
    rng = f"A{row_index}:N{row_index}"
    format_cell_range(worksheet, rng, cell_fmt)


# -------------------------
# Handlers –±–æ—Ç–∞
# -------------------------
def _main_keyboard():
    return InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚ûï –î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å", callback_data="add"),
            InlineKeyboardButton("‚ÑπÔ∏è –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å", callback_data="last"),
        ],
        [
            InlineKeyboardButton("üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π", callback_data="delete"),
            InlineKeyboardButton("üìä –ó–≤—ñ—Ç –º—ñ—Å—è—Ü—è", callback_data="report"),
        ],
        [
            InlineKeyboardButton("üîÅ –°–∫–∏–Ω—É—Ç–∏", callback_data="reset"),
            InlineKeyboardButton("‚ùì –î–æ–ø–æ–º–æ–≥–∞", callback_data="help"),
        ],
    ])


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id if update.effective_user else 0
    if OWNER_ID and uid != OWNER_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return
    user_data_store.pop(uid, None)
    await update.message.reply_text(
        "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é –Ω–∏–∂—á–µ üëá",
        reply_markup=_main_keyboard()
    )


async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    if OWNER_ID and uid != OWNER_ID:
        await q.edit_message_text("‚ùå –£ —Ç–µ–±–µ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É.")
        return ConversationHandler.END

    data = q.data

    if data == "add":
        # –ü–∏—Ç–∞—î–º–æ –æ–¥–æ–º–µ—Ç—Ä
        last_odo = _get_last_odometer()
        hint = f" (–ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: {last_odo})" if last_odo is not None else ""
        await q.edit_message_text(
            f"–í–≤–µ–¥–∏ *–ø–æ—Ç–æ—á–Ω–∏–π –æ–¥–æ–º–µ—Ç—Ä*{hint}:", parse_mode="Markdown"
        )
        return WAITING_FOR_ODOMETER

    elif data == "last":
        vals = worksheet.get_all_values()
        if len(vals) <= 1:
            await q.edit_message_text("–ó–∞–ø–∏—Å—ñ–≤ —â–µ –Ω–µ–º–∞—î.")
            return ConversationHandler.END
        last = vals[-1]
        msg = (
            f"üïí {last[0]}\n"
            f"üìç –û–¥–æ–º–µ—Ç—Ä: {last[1]}\n"
            f"üîÑ –ü—Ä–æ–±—ñ–≥: {last[2]} –∫–º\n"
            f"üèô –ú—ñ—Å—Ç–æ: {last[3]} –∫–º ({last[4]} ‚Üí {last[5]} –ª)\n"
            f"üèû –†–∞–π–æ–Ω: {last[6]} –∫–º ({last[7]} ‚Üí {last[8]} –ª)\n"
            f"üõ£ –¢—Ä–∞—Å–∞: {last[9]} –∫–º ({last[10]} ‚Üí {last[11]} –ª)\n"
            f"Œ£ –ü–∞–ª–∏–≤–æ: {last[12]} ‚Üí {last[13]} –ª"
        )
        await q.edit_message_text(msg)
        return ConversationHandler.END

    elif data == "delete":
        r = _last_row_index()
        if r <= 1:
            await q.edit_message_text("–ù—ñ—á–æ–≥–æ –≤–∏–¥–∞–ª—è—Ç–∏.")
        else:
            worksheet.delete_rows(r)
            await q.edit_message_text("‚úÖ –û—Å—Ç–∞–Ω–Ω—ñ–π –∑–∞–ø–∏—Å –≤–∏–¥–∞–ª–µ–Ω–æ.")
        return ConversationHandler.END

    elif data == "report":
        # –ü—Ä–æ—Å—Ç–∏–π –∑–≤—ñ—Ç –∑–∞ –ø–æ—Ç–æ—á–Ω–∏–π –º—ñ—Å—è—Ü—å: —Å—É–º–∞ –∫–æ–ª–æ–Ω–∫–∏ N (total_rounded)
        now = datetime.now(tz)
        month = now.strftime("%Y-%m")
        vals = worksheet.get_all_values()
        total = 0.0
        cnt = 0
        for i, row in enumerate(vals[1:], start=2):
            # row[0] ‚Äî –¥–∞—Ç–∞-—á–∞—Å —É str
            if row and row[0].startswith(month):
                try:
                    total += float(row[13])
                    cnt += 1
                except Exception:
                    pass
        await q.edit_message_text(f"üìä –ó–∞–ø–∏—Å—ñ–≤: {cnt}\nŒ£ –∑–∞ {month}: {round(total,2)} –ª")
        return ConversationHandler.END

    elif data == "reset":
        user_data_store.pop(uid, None)
        await q.edit_message_text("–°–∫–∏–Ω—É—Ç–æ. –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=_main_keyboard())
        return ConversationHandler.END

    elif data == "help":
        await q.edit_message_text(
            "–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å ‚Üí –≤–≤–µ–¥–∏ –æ–¥–æ–º–µ—Ç—Ä ‚Üí –≤–≤–µ–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–±—ñ–≥—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "
            "`–º—ñ—Å—Ç–æ 50 —Ä–∞–π–æ–Ω 30 —Ç—Ä–∞—Å–∞ 20` –∞–±–æ `50/30/20`). –°—É–º–∞ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ–±—ñ–≥—É.",
            parse_mode="Markdown",
            reply_markup=_main_keyboard()
        )
        return ConversationHandler.END

    return ConversationHandler.END


async def handle_odometer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    txt = (update.message.text or "").strip()
    if not txt.isdigit():
        await update.message.reply_text("–í–≤–µ–¥–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ –æ–¥–æ–º–µ—Ç—Ä–∞.")
        return WAITING_FOR_ODOMETER

    odo = int(txt)
    prev = _get_last_odometer()
    if prev is None:
        diff = 0
    else:
        diff = odo - prev
        if diff <= 0:
            await update.message.reply_text(
                f"–ù–æ–≤–∏–π –æ–¥–æ–º–µ—Ç—Ä ({odo}) –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–∏–π –∑–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π ({prev}). –°–ø—Ä–æ–±—É–π —â–µ."
            )
            return WAITING_FOR_ODOMETER

    user_data_store[uid] = {"odometer": odo, "diff": diff}
    eq = (diff // 3) if diff else 0
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª –ø—Ä–æ–±—ñ–≥—É –ø–æ *–º—ñ—Å—Ç–æ/—Ä–∞–π–æ–Ω/—Ç—Ä–∞—Å–∞*.\n"
        f"–ù–∞–ø—Ä.: `–º—ñ—Å—Ç–æ {eq} —Ä–∞–π–æ–Ω {eq} —Ç—Ä–∞—Å–∞ {diff-2*eq}` –∞–±–æ `50/30/20`.\n"
        f"–°—É–º–∞ –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ *{diff}* –∫–º.",
        parse_mode="Markdown"
    )
    return WAITING_FOR_DISTRIBUTION


async def handle_distribution(update: Update, context: ContextTypes.DEFAULT_TYPE):
    uid = update.effective_user.id
    data = user_data_store.get(uid)
    if not data:
        await update.message.reply_text("–ù–∞—Ç–∏—Å–Ω–∏ /start —ñ –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ.")
        return ConversationHandler.END

    dist_raw = update.message.text or ""
    city_km, district_km, highway_km = (0, 0, 0)
    parsed = _parse_distribution(dist_raw, data["diff"])
    if not parsed:
        await update.message.reply_text(
            "–ù–µ –≤–¥–∞–ª–æ—Å—å —Ä–æ–∑—ñ–±—Ä–∞—Ç–∏ —Ä–æ–∑–ø–æ–¥—ñ–ª. –ü–µ—Ä–µ–≤—ñ—Ä –ø—Ä–∏–∫–ª–∞–¥ —Ç–∞ —Å—É–º—É –∫—ñ–ª–æ–º–µ—Ç—Ä—ñ–≤."
        )
        return WAITING_FOR_DISTRIBUTION

    city_km, district_km, highway_km = parsed
    data.update({
        "city_km": city_km,
        "district_km": district_km,
        "highway_km": highway_km,
    })

    # –†–æ–∑—Ä–∞—Ö—É–Ω–∫–∏ –ø–∞–ª—å–Ω–æ–≥–æ (exact —Ç–∞ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω—è –¥–æ 2 –∑–Ω–∞–∫—ñ–≤)
    city_exact = city_km * CITY_L100 / 100.0
    district_exact = district_km * DISTRICT_L100 / 100.0
    highway_exact = highway_km * HIGHWAY_L100 / 100.0

    def r2(x): return round(x + 1e-9, 2)

    data.update({
        "city_exact": city_exact,
        "city_rounded": r2(city_exact),
        "district_exact": district_exact,
        "district_rounded": r2(district_exact),
        "highway_exact": highway_exact,
        "highway_rounded": r2(highway_exact),
    })
    total_exact = city_exact + district_exact + highway_exact
    data.update({
        "total_exact": total_exact,
        "total_rounded": r2(total_exact),
    })
    user_data_store[uid] = data

    text = (
        f"üìç –û–¥–æ–º–µ—Ç—Ä: {data['odometer']}\n"
        f"üîÑ –ü—Ä–æ–±—ñ–≥: {data['diff']} –∫–º\n\n"
        f"üèô –ú—ñ—Å—Ç–æ: {city_km} –∫–º ‚Üí {r2(city_exact)} –ª\n"
        f"üèû –†–∞–π–æ–Ω: {district_km} –∫–º ‚Üí {r2(district_exact)} –ª\n"
        f"üõ£ –¢—Ä–∞—Å–∞: {highway_km} –∫–º ‚Üí {r2(highway_exact)} –ª\n"
        f"Œ£ –í—Å—å–æ–≥–æ: {r2(total_exact)} –ª\n\n"
        f"–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–∞–ø–∏—Å?"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏", callback_data="save"),
         InlineKeyboardButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ])
    await update.message.reply_text(text, reply_markup=keyboard)
    return CONFIRM


async def confirm_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    await q.answer()
    uid = q.from_user.id
    data = user_data_store.get(uid)
    if not data:
        await q.edit_message_text("–î–∞–Ω—ñ –∑–∞–≥—É–±–ª–µ–Ω–æ. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ /start.")
        return ConversationHandler.END

    # –§–æ—Ä–º—É—î–º–æ —Ä—è–¥–æ–∫ (A..N = 14 –∫–æ–ª–æ–Ω–æ–∫)
    now = datetime.now(tz)
    row = [
        now.strftime("%Y-%m-%d %H:%M:%S"),             # A: –¥–∞—Ç–∞
        str(data["odometer"]),                          # B: –æ–¥–æ–º–µ—Ç—Ä
        str(data["diff"]),                              # C: –ø—Ä–æ–±—ñ–≥
        str(data["city_km"]),                           # D
        f"{data['city_exact']:.4f}",                    # E
        f"{data['city_rounded']:.2f}",                  # F
        str(data["district_km"]),                       # G
        f"{data['district_exact']:.4f}",                # H
        f"{data['district_rounded']:.2f}",              # I
        str(data["highway_km"]),                        # J
        f"{data['highway_exact']:.4f}",                 # K
        f"{data['highway_rounded']:.2f}",               # L
        f"{data['total_exact']:.4f}",                   # M
        f"{data['total_rounded']:.2f}",                 # N
    ]

    worksheet.append_row(row, value_input_option="RAW")
    r = _last_row_index()
    _format_just_added_row(r)

    user_data_store.pop(uid, None)
    await q.edit_message_text("‚úÖ –ó–∞–ø–∏—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ.", reply_markup=_main_keyboard())
    return ConversationHandler.END


async def cancel_save(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.edit_message_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=_main_keyboard())
    else:
        await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=_main_keyboard())
    return ConversationHandler.END


# -------------------------
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PTB + Starlette
# -------------------------
async def init_telegram_app():
    global telegram_app
    if telegram_app is not None:
        return  # –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ

    if not TELEGRAM_TOKEN:
        raise RuntimeError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ TELEGRAM_TOKEN")

    _authorize_gspread()

    telegram_app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    # –†–æ–∑–º–æ–≤–∞
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start),
                      CallbackQueryHandler(handle_buttons)],
        states={
            WAITING_FOR_ODOMETER: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_odometer)
            ],
            WAITING_FOR_DISTRIBUTION: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_distribution)
            ],
            CONFIRM: [
                CallbackQueryHandler(confirm_save, pattern="^save$"),
                CallbackQueryHandler(cancel_save, pattern="^cancel$"),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_save)],
        per_chat=True,
        per_user=True,
        per_message=True,  # —â–æ–± –Ω–µ –±—É–ª–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    )

    telegram_app.add_handler(conv_handler)
    telegram_app.add_handler(CommandHandler("help", start))  # –ø—Ä–æ—Å—Ç–∏–π /help -> –º–µ–Ω—é

    # –í–ê–ñ–õ–ò–í–û: —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫, –∞–ª–µ –Ω–µ –∑–∞–ø—É—Å–∫–∞—î–º–æ polling
    await telegram_app.initialize()

    # –°—Ç–∞–≤–∏–º–æ –≤–µ–±—Ö—É–∫
    webhook_url = _build_webhook_url()
    await telegram_app.bot.set_webhook(url=webhook_url, drop_pending_updates=True)
    logger.info(f"–í–µ–±—Ö—É–∫ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")


async def shutdown_telegram_app():
    global telegram_app
    if telegram_app is None:
        return
    try:
        await telegram_app.bot.delete_webhook()
    except Exception as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ deleteWebhook: {e}")
    try:
        await telegram_app.shutdown()
    except Exception as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ Application.shutdown: {e}")
    telegram_app = None
    logger.info("PTB –∑—É–ø–∏–Ω–µ–Ω–æ")


# -------------------------
# Starlette routes
# -------------------------
async def home(request: Request):
    # –ø—ñ–¥—Ç—Ä–∏–º—É—î–º–æ GET —ñ HEAD
    return PlainTextResponse("Bot is running")

async def webhook(request: Request):
    global telegram_app
    if telegram_app is None:
        return Response("App not initialized", status_code=503)

    try:
        data = await request.json()
    except Exception:
        return Response("Invalid JSON", status_code=400)

    try:
        update = Update.de_json(data, bot=telegram_app.bot)
    except Exception:
        return Response("Failed to deserialize update", status_code=400)

    try:
        await telegram_app.process_update(update)
    except Exception as e:
        logger.exception("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∞–ø–¥–µ–π—Ç—É")
        return Response(f"Webhook error: {e}", status_code=500)

    return Response(status_code=200)


routes = [
    Route("/", home, methods=["GET", "HEAD"]),
    Route("/webhook", webhook, methods=["POST"]),
]

app = Starlette(
    routes=routes,
    on_startup=[init_telegram_app],
    on_shutdown=[shutdown_telegram_app],
)

# ------------- –ª–æ–∫–∞–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ -------------
if __name__ == "__main__":
    import uvicorn
    # –ª–æ–∫–∞–ª—å–Ω–æ –≤–µ–±—Ö—É–∫ –Ω–µ –ø–æ—Ç—Ä—ñ–±–µ–Ω, –∞–ª–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤—Å–µ –æ–¥–Ω–æ –º–∞—î –ø—Ä–æ–π—Ç–∏ –¥–ª—è handlers
    async def _local():
        await init_telegram_app()
    asyncio.run(_local())

    port = int(os.getenv("PORT", "8000"))
    uvicorn.run("main:app", host="0.0.0.0", port=port, reload=False)
